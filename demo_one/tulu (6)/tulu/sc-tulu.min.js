(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _scCommonMethods = require("../../../js/sc-common-methods");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ScTuluCampaign = /*#__PURE__*/function () {
  function ScTuluCampaign() {
    _classCallCheck(this, ScTuluCampaign);
  }
  _createClass(ScTuluCampaign, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var that;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              that = this;
              that.parentModalId = '';
              that.ScTuluCamp = document.querySelector('.sc-tulu-camp');
              that.currentArticleId = '';
              that.earningHistory = that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item--earning-history');
              that.earningHistory.innerHTML = '';
              this.textObj = {
                queryParameterName: 'tab',
                registrationPlacementId: 'rewards_registration',
                commonPlacementId: 'tradeup_page',
                articlePlacementId: 'levelup_page',
                diversifyText: "You're all set. Check out the other missions to get rewarded.",
                tradeUpLabel: 'Trade',
                mileText: 'Miles',
                levelUp: {
                  feedbackSuccess: 'Feedback Success',
                  feedbackError: 'Feedback Error',
                  feedbackFailedText: 'Failed',
                  feedbackFailedDesc: 'Sorry! You failed the test.',
                  feedbackSuccessDesc: 'Congratulations! You passed the test.',
                  articles: [{
                    articleId: 'wealth-needs-3',
                    quizValue: 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb',
                    //A
                    title: 'Tips to earn HKD50,000 passive income',
                    description: 'How can you achieve financial freedom and live the life you envision sooner?',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: 'Tips to earn HKD50,000 passive income',
                    popupDescription: 'How can you achieve financial freedom and live the life you envision sooner?'
                  }, {
                    articleId: 'wealth-needs-5',
                    quizValue: '3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d',
                    //B
                    title: '💰Cash is no longer king?',
                    description: 'It’s time to rethink cash as the Fed cuts rates',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💰Cash is no longer king?',
                    popupDescription: 'It’s time to rethink cash as the Fed cuts rates'
                  }, {
                    articleId: 'wealth-needs-2',
                    quizValue: 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb',
                    //A
                    title: '⚡The silent cash thief: how inflation steals 30% of savings',
                    description: "Be aware of \"cash thief\"",
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💰Cash is no longer king?',
                    popupDescription: 'It’s time to rethink cash as the Fed cuts rates'
                  }, {
                    articleId: 'wealth-needs-9',
                    quizValue: '2e7d2c03a9507ae265ecf5b5356885a53393a2029d241394997265a1a25aefc6',
                    //C
                    title: '💡▶️2025 Global Market Outlook: Foundation Portfolio',
                    description: '💡1-minute 2025 Investment Essentials',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💡▶️2025 Global Market Outlook: Foundation Portfolio',
                    popupDescription: '💡1-minute 2025 Investment Essentials'
                  }, {
                    articleId: 'wealth-needs-33',
                    quizValue: '3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d',
                    //B
                    title: '💡▶️2025 Global Market Outlook: Passive Income',
                    description: '1-minute 2025 Income Strategies',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💡▶️2025 Global Market Outlook: Passive Income',
                    popupDescription: '1-minute 2025 Income Strategies'
                  }, {
                    articleId: 'wealth-needs-36',
                    quizValue: '18ac3e7343f016890c510e93f935261169d9e3f565436429830faf0934f4f8e4',
                    //d
                    title: '💡▶️2025 Global Market Outlook: Foreign Exchange',
                    description: '1-minute 2025 FX Strategies',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💡▶️2025 Global Market Outlook: Foreign Exchange',
                    popupDescription: '1-minute 2025 FX Strategies'
                  }, {
                    articleId: 'wealth-needs-51',
                    quizValue: '18ac3e7343f016890c510e93f935261169d9e3f565436429830faf0934f4f8e4',
                    //d
                    title: '💱Unveiling the Mystique of Carry Trade',
                    description: 'Explore how investors earn interest spread by carry trade',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💱Unveiling the Mystique of Carry Trade',
                    popupDescription: 'Explore how investors earn interest spread by carry trade'
                  }, {
                    articleId: 'wealth-needs-39',
                    quizValue: 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb',
                    //A
                    title: '💲Debunk safe haven currencies',
                    description: 'What drives the inflow into the safe haven currencies during market turbulence?',
                    articlePoints: 50,
                    quizPoints: 50,
                    popupTitle: '💲Debunk safe haven currencies',
                    popupDescription: 'What drives the inflow into the safe haven currencies during market turbulence?'
                  }]
                },
                tradeUp: {
                  progressNumber: [100, 200, 300],
                  perRow: 6,
                  maxCount: 18,
                  fields: [{
                    key: 'RewardCountFX',
                    text: 'Online Equity',
                    points: 1000,
                    className: 'sc-tulu-camp-progress__content-sxa'
                  }, {
                    key: 'RewardCountSXA',
                    text: 'FX',
                    points: 1000,
                    className: 'sc-tulu-camp-progress__content-fx'
                  }, {
                    key: 'RewardCountUT',
                    text: 'Unit Trust',
                    points: 1000,
                    className: 'sc-tulu-camp-progress__content-ut'
                  }]
                },
                diversify: {
                  sxa: [{
                    key: 'OpenAccountSXA',
                    text: 'Open An Account',
                    value: '1000',
                    conditional: true,
                    popupTitle: 'You’ll be brought to [Stock Trading Platform]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: 'https://retail.sc.com/scmobile/hk?ngroute=web/oe-webview'
                  }, {
                    key: 'FirstTradeSXA',
                    text: 'Make your first trade',
                    value: '1000',
                    conditional: true,
                    popupTitle: 'You’ll be brought to [Stock Trading Platform]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: 'https://retail.sc.com/scmobile/hk?ngroute=web/oe-webview'
                  }, {
                    key: 'CompletionBonusSXA',
                    text: 'Completion Bonus',
                    value: '2000',
                    conditional: false,
                    popupTitle: 'You’ll be brought to [Stock Trading Platform]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: '#'
                  }],
                  fx: [{
                    key: 'FirstTradeFX',
                    text: 'Make your first trade',
                    value: '1000',
                    conditional: true,
                    popupTitle: 'You’ll be brought to [Foreign Exchange Platform]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: 'https://retail.sc.com/scmobile/hk?ngroute=web/livefx-webview'
                  }],
                  ut: [{
                    key: 'OpenAccountUT',
                    text: 'Open An Account',
                    value: '1000',
                    conditional: true,
                    popupTitle: 'You’ll be brought to [Investment fund]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: 'https://retail.sc.com/scmobile/hk?ngroute=web/omf-webview'
                  }, {
                    key: 'FirstTradeUT',
                    text: 'Make your first trade',
                    value: '1000',
                    conditional: true,
                    popupTitle: 'You’ll be brought to [Investment fund]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: 'https://retail.sc.com/scmobile/hk?ngroute=web/omf-webview'
                  }, {
                    key: 'CompletionBonusUT',
                    text: 'Finish all actions to earn bonus miles',
                    value: '2000',
                    conditional: false,
                    popupTitle: 'You’ll be brought to [Investment fund]',
                    popupDescription: 'You’ll not be able to get straight back to the the Missions directly.',
                    popupCta: '#'
                  }]
                },
                nextTask: {
                  diversify: [{
                    key: 'FirstTradeFX',
                    text: 'FX first Trade'
                  }, {
                    key: 'OpenAccountSXA',
                    text: 'SXA Open Account'
                  }, {
                    key: 'FirstTradeSXA',
                    text: 'SXA First Trade'
                  }, {
                    key: 'OpenAccountUT',
                    text: 'UT Open Account'
                  }, {
                    key: 'FirstTradeUT',
                    text: 'UT first Tarde'
                  }],
                  tradeUp: {
                    labelText: 'Complete your data-number trade'
                  }
                }
              };
              that.handleTabsContent();
              _context.next = 10;
              return that.getStartedModal();
            case 10:
              _context.next = 12;
              return that.loadCommonDataApi();
            case 12:
              _context.next = 14;
              return that.loadArticleDataApi();
            case 14:
              that.asiaMilesYesModal();
              that.handleModal();
              that.handleQuestionnaire();
              that.handleFaqAnalytics();
              that.handleTermsAnalytics();
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "levelUpEarningHistory",
    value: function levelUpEarningHistory() {
      var that = this;
      var data = that.articlePlacementData;
      var htmlCode = '';
      this.textObj.levelUp.articles.forEach(function (article) {
        var articleObj = data.offers.find(function (offer) {
          return offer.fields.some(function (field) {
            return field.name === 'ArticleID' && field.value === article.articleId;
          });
        });
        var articleRead = articleObj ? articleObj.fields.find(function (field) {
          return field.name === 'ArticleRead';
        }).value : null;
        var quizCompleted = articleObj ? articleObj.fields.find(function (field) {
          return field.name === 'QuizCompleted';
        }).value : null;
        if (articleRead === 'Y' || quizCompleted === 'Y') {
          var total = article.articlePoints + article.quizPoints;
          htmlCode += "<div class=\"sc-tulu-camp-earnings__card sc-tulu-camp-earnings--purple\">\n          <div class=\"sc-tulu-camp-earnings__left\">\n            <div class=\"sc-tulu-camp-earnings__icon\"></div>\n            <div class=\"sc-tulu-camp-earnings__text\">\n              <div class=\"sc-tulu-camp-earnings__head\">\n                ".concat(article.title, "\n              </div>\n              <p class=\"sc-tulu-camp-earnings__sub-head\">\n              ").concat(article.description, "\n              </p>\n            </div>\n          </div>\n          <div class=\"sc-tulu-camp-earnings__right\">\n            <p>\n              <strong>").concat((0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, total), "</strong>\n              ").concat(that.textObj.mileText, "\n            </p>\n          </div>\n        </div>");
        }
      });
      that.earningHistory.innerHTML += htmlCode;
    }
  }, {
    key: "tradeUpEarningHistory",
    value: function tradeUpEarningHistory() {
      var that = this;
      var data = that.commonPlacementData.fields;
      var htmlCode = '';
      that.textObj.tradeUp.fields.forEach(function (item) {
        var value = Number(that.getObjectValue(data, item.key));
        if (value) {
          htmlCode += "<div class=\"sc-tulu-camp-earnings__card sc-tulu-camp-earnings--green\">\n          <div class=\"sc-tulu-camp-earnings__left\">\n            <div class=\"sc-tulu-camp-earnings__icon\"></div>\n            <div class=\"sc-tulu-camp-earnings__text\">\n              <div class=\"sc-tulu-camp-earnings__head\">\n                ".concat(that.textObj.tradeUpLabel, " ").concat(value, " \n              </div>\n              <p class=\"sc-tulu-camp-earnings__sub-head\">\n                ").concat(item.text, "\n              </p>\n            </div>\n          </div>\n          <div class=\"sc-tulu-camp-earnings__right\">\n            <p>\n              <strong>").concat((0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, item.points), "</strong>\n              ").concat(that.textObj.mileText, "\n            </p>\n          </div>\n        </div>");
        }
      });
      that.earningHistory.innerHTML += htmlCode;
    }
  }, {
    key: "diversifyEarningHistory",
    value: function diversifyEarningHistory() {
      var that = this;
      var data = that.commonPlacementData.fields;
      var htmlCode = '';
      Object.entries(this.textObj.diversify).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          category = _ref2[0],
          items = _ref2[1];
        items.forEach(function (item) {
          if (item.conditional) {
            var value = that.getObjectValue(data, item.key);
            if (value === 'Y') {
              var _that$textObj$tradeUp;
              var keyName = "RewardCount".concat(category.toUpperCase());
              var subHeading = ((_that$textObj$tradeUp = that.textObj.tradeUp.fields.find(function (item) {
                return item.key === keyName;
              })) === null || _that$textObj$tradeUp === void 0 ? void 0 : _that$textObj$tradeUp.text) || null;
              htmlCode += "<div class=\"sc-tulu-camp-earnings__card sc-tulu-camp-earnings--blue\">\n            <div class=\"sc-tulu-camp-earnings__left\">\n              <div class=\"sc-tulu-camp-earnings__icon\"></div>\n              <div class=\"sc-tulu-camp-earnings__text\">\n                <div class=\"sc-tulu-camp-earnings__head\">\n                  ".concat(item.text, "\n                </div>\n                <p class=\"sc-tulu-camp-earnings__sub-head\">").concat(subHeading, "</p>\n              </div>\n            </div>\n            <div class=\"sc-tulu-camp-earnings__right\">\n              <p>\n                <strong>").concat((0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, item.value), "</strong>\n                ").concat(that.textObj.mileText, "\n              </p>\n            </div>\n          </div>");
            }
          }
        });
      });
      that.earningHistory.innerHTML += htmlCode;
    }
  }, {
    key: "fetchApiData",
    value: function () {
      var _fetchApiData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {
        var response, data;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(typeof url !== 'string' || !url.trim())) {
                _context2.next = 2;
                break;
              }
              throw new Error('Invalid URL: A valid URL string is required.');
            case 2:
              _context2.prev = 2;
              _context2.next = 5;
              return fetch(url, {
                headers: {
                  'Content-Type': 'application/json',
                  Accept: 'application/json'
                }
              });
            case 5:
              response = _context2.sent;
              if (response.ok) {
                _context2.next = 8;
                break;
              }
              throw new Error("HTTP Error ".concat(response.status, ": ").concat(response.statusText));
            case 8:
              _context2.next = 10;
              return response.json();
            case 10:
              data = _context2.sent;
              return _context2.abrupt("return", data);
            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](2);
              console.log('Fetch API Error:', _context2.t0.message);
              return _context2.abrupt("return", null);
            case 18:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[2, 14]]);
      }));
      function fetchApiData(_x2) {
        return _fetchApiData.apply(this, arguments);
      }
      return fetchApiData;
    }()
  }, {
    key: "getDataFromJsBridge",
    value: function getDataFromJsBridge(placeholderName) {
      // eslint-disable-next-line no-undef
      return new Promise(function (resolve, reject) {
        if (!window.cordova || !window.cordova.exec) {
          console.log('Cordova is not available.');
          return reject(new Error('Cordova is not available.'));
        }
        var icmId = sessionStorage.getItem('icmpid');
        if (!icmId) {
          console.warn('ICM ID is missing from sessionStorage.');
        }
        var requestBody = JSON.stringify({
          operationName: 'getCustomerOffers',
          variables: {
            placeholder: placeholderName,
            icmId: icmId || '',
            // Ensuring no `null` or `undefined`
            templateMerge: false
          },
          query: "\n                query getCustomerOffers($placeholder: String!, $icmId: String, $templateMerge: Boolean) { \n                    offers(placeholder: $placeholder, icmId: $icmId, templateMerge: $templateMerge) { \n                        __typename \n                        placeholder \n                        offers { \n                            __typename \n                            id \n                            title \n                            message \n                            images { __typename ...imageSet } \n                            primarycta { __typename ...ctaLink } \n                            secondarycta { __typename ...ctaLink } \n                            feedback { __typename name group interactionId issue rank placement } \n                            index \n                            fields { __typename name value } \n                        } \n                    } \n                } \n                fragment imageSet on ImageSet { \n                    __typename small medium large \n                } \n                fragment ctaLink on CtaLink { \n                    __typename label link deeplink \n                }\n            "
        });
        var requestHeaders = JSON.stringify({
          'X-APOLLO-OPERATION-NAME': 'getCustomerOffers'
        });
        window.cordova.exec(function (successData) {
          resolve(successData);
        }, function (errorData) {
          console.error('Cordova execution failed:', errorData);
          reject(new Error("Cordova error: ".concat(errorData)));
        }, 'gqlplugin',
        // Plugin name
        'request',
        // Function name
        [requestBody, requestHeaders, 'POST'] // Parameters
        );
      });
    }

    /**
     * Asynchronously loads common data from an API and updates the UI accordingly.
     *
     * @async
     * @function loadCommonDataApi
     * @returns {Promise<void>} A promise that resolves when the data is loaded and UI is updated.
     * @throws {Error} Logs an error if the API request fails.
     */
  }, {
    key: "loadCommonDataApi",
    value: function () {
      var _loadCommonDataApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var that, _jsonData, _jsonData$data, _jsonData$data$offers, _jsonData$data$offers2, _that$ScTuluCamp, _that$ScTuluCamp2, jsonData, diversify, tradeUp, levelUp, diversifyTotal, diversifyWidth, tradeUpTotal, tradeUpWidth, levelUpTotal, levelUpWidth, mileList, valueFound, numberList, totalMilesAccumulated, totalAccumulated, milesSelector;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              that = this;
              _context3.prev = 1;
              _context3.next = 4;
              return this.fetchApiData('https://av.sc.com/global/assets/js/tulu/tradeup.json');
            case 4:
              jsonData = _context3.sent;
              // jsonData = await this.getDataFromJsBridge(that.textObj.commonPlacementId);
              // jsonData = JSON.parse(jsonData);
              that.commonPlacementData = ((_jsonData = jsonData) === null || _jsonData === void 0 ? void 0 : (_jsonData$data = _jsonData.data) === null || _jsonData$data === void 0 ? void 0 : (_jsonData$data$offers = _jsonData$data.offers) === null || _jsonData$data$offers === void 0 ? void 0 : (_jsonData$data$offers2 = _jsonData$data$offers.offers) === null || _jsonData$data$offers2 === void 0 ? void 0 : _jsonData$data$offers2[0]) || [];
              diversify = Number(that.getObjectValue(that.commonPlacementData.fields, 'consolidatedDiversify'));
              tradeUp = Number(that.getObjectValue(that.commonPlacementData.fields, 'consolidatedTradeup'));
              levelUp = Number(that.getObjectValue(that.commonPlacementData.fields, 'consolidatedLevelUp'));
              diversifyTotal = Number((0, _scCommonMethods.trim)(that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-diversify .sc-tulu-camp-product-card__progress-total-main strong').innerText).replace(/[^0-9.]/g, ''));
              diversifyWidth = diversify / diversifyTotal * 100;
              that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-diversify .sc-tulu-camp-product-card__progress-bar-inner').style.width = "".concat(diversifyWidth, "%");
              that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-diversify .sc-tulu-camp-product-card__progress-bar-inner').style.width = "".concat(diversifyWidth, "%");
              tradeUpTotal = Number((0, _scCommonMethods.trim)(that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-trade-up .sc-tulu-camp-product-card__progress-total-main strong').innerText).replace(/[^0-9.]/g, ''));
              tradeUpWidth = tradeUp / tradeUpTotal * 100;
              that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-trade-up .sc-tulu-camp-product-card__progress-bar-inner').style.width = "".concat(tradeUpWidth, "%");
              that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-trade-up .sc-tulu-camp-product-card__progress-bar-inner').style.width = "".concat(tradeUpWidth, "%");
              levelUpTotal = Number((0, _scCommonMethods.trim)(that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-level-up .sc-tulu-camp-product-card__progress-total-main strong').innerText).replace(/[^0-9.]/g, ''));
              levelUpWidth = levelUp / levelUpTotal * 100;
              that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-level-up .sc-tulu-camp-product-card__progress-bar-inner').style.width = "".concat(levelUpWidth, "%");
              that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-level-up .sc-tulu-camp-product-card__progress-bar-inner').style.width = "".concat(levelUpWidth, "%");
              that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-diversify .sc-tulu-camp-product-card__progress-value').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, diversify);
              that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-diversify .sc-tulu-camp-product-card__progress-value').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, diversify);
              that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-trade-up .sc-tulu-camp-product-card__progress-value').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, tradeUp);
              that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-trade-up .sc-tulu-camp-product-card__progress-value').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, tradeUp);
              that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-level-up .sc-tulu-camp-product-card__progress-value').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, levelUp);
              that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-level-up .sc-tulu-camp-product-card__progress-value').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, levelUp);

              //Update section miles
              mileList = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-product-card__progress-total strong');
              mileList.forEach(function (mile) {
                mile.innerText = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, (0, _scCommonMethods.trim)(mile.innerText).replace(/[^0-9.]/g, ''));
              });
              valueFound = that.generateDiversify();
              that.diversifyNextTask();
              that.generateTradeUp();
              numberList = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-product-card__progress-total-main strong');
              totalMilesAccumulated = 0;
              numberList.forEach(function (el) {
                if (valueFound && el.closest('.sc-tulu-camp-product-card-diversify') || !el.closest('.sc-tulu-camp-product-card-diversify')) {
                  totalMilesAccumulated += Number((0, _scCommonMethods.trim)(el.innerText).replace(/[^0-9.]/g, ''));
                }
              });
              totalAccumulated = (_that$ScTuluCamp = that.ScTuluCamp) === null || _that$ScTuluCamp === void 0 ? void 0 : _that$ScTuluCamp.querySelector('.sc-tulu-camp-milescard__desc strong');
              if (totalAccumulated) {
                totalAccumulated.innerText = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, totalMilesAccumulated);
              }

              // Update total miles display
              milesSelector = (_that$ScTuluCamp2 = that.ScTuluCamp) === null || _that$ScTuluCamp2 === void 0 ? void 0 : _that$ScTuluCamp2.querySelector('.sc-cvp__middle strong');
              if (milesSelector) {
                milesSelector.innerText = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, (valueFound ? diversify : 0) + tradeUp + levelUp);
              }
              that.diversifyEarningHistory();
              that.tradeUpEarningHistory();
              _context3.next = 46;
              break;
            case 43:
              _context3.prev = 43;
              _context3.t0 = _context3["catch"](1);
              console.error('Error fetching consolidate data:', _context3.t0);
            case 46:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[1, 43]]);
      }));
      function loadCommonDataApi() {
        return _loadCommonDataApi.apply(this, arguments);
      }
      return loadCommonDataApi;
    }()
    /**
     * Updates the task description in the product card if a matching value is found.
     * Iterates through `diversify` tasks and updates the `.sc-tulu-camp-product-card__task-desc`
     * element with the corresponding text if the value associated with `item.key` is "N".
     */
  }, {
    key: "diversifyNextTask",
    value: function diversifyNextTask() {
      var that = this;
      // eslint-disable-next-line no-unused-vars
      var _iterator = _createForOfIteratorHelper(that.textObj.nextTask.diversify),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          var value = that.getObjectValue(that.commonPlacementData.fields, item.key);
          if (value === 'N') {
            var content = that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-diversify .sc-tulu-camp-product-card__bottom .sc-tulu-camp-product-card__task-desc-content');
            if (content) {
              content.innerText = item.text;
              // let url;
              // // eslint-disable-next-line no-unused-vars
              // for (const [category, diversify] of Object.entries(
              //   this.textObj.diversify
              // )) {
              //   const found = diversify.find((dive) => dive.key === item.key);
              //   if (found) {
              //     url = found.popupCta;
              //     break; // Exit the loop once found
              //   }
              // }

              // if (url) {
              //   const closestElement = content.closest(
              //     ".sc-tulu-camp-product-card__bottom"
              //   );
              //   closestElement.setAttribute("data-link-url", url);
              //   closestElement.setAttribute("data-modal-selector", item.key);
              // }
            }

            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    /**
     * Generates the HTML structure for the "Diversify" section based on data conditions.
     *
     * @function generateDiversify
     */
  }, {
    key: "generateDiversify",
    value: function generateDiversify() {
      var that = this;
      var data = that.commonPlacementData.fields;
      var mainDiversify = that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-diversify');
      var contentDiversify = that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-diversify');
      var campaignStartDate = that.formatDate(that.getObjectValue(data, 'CampaignStartDate'));
      var campaignEndDate = that.formatDate(that.getObjectValue(data, 'CampaignEndDate'));
      var dateStr = that.generateDateString(campaignStartDate, campaignEndDate);
      that.ScTuluCamp.querySelectorAll('.sc-cvp__bottom').forEach(function (el) {
        el.innerText = dateStr;
      });
      that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-product-card__progress-desc').forEach(function (el) {
        el.innerText = dateStr;
      });
      var valueFound = false;
      // eslint-disable-next-line no-unused-vars
      Object.entries(this.textObj.diversify).forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
          category = _ref4[0],
          items = _ref4[1];
        items.forEach(function (item) {
          if (item.conditional) {
            var value = that.getObjectValue(data, item.key);
            if (value) {
              valueFound = true;
            }
          }
        });
      });
      if (valueFound) {
        contentDiversify.querySelector('.sc-tulu-camp-wrapper-full-all-set').classList.add('hide');
        contentDiversify.querySelector('.sc-tulu-camp-wrapper-full__inner').classList.remove('hide');
        contentDiversify.querySelector('.sc-tulu-camp-product-card').classList.remove('hide');

        //At least one value present
        Object.entries(this.textObj.diversify).forEach(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
            category = _ref6[0],
            items = _ref6[1];
          var htmlCode = '';
          var categoryWrapper = that.ScTuluCamp.querySelector(".sc-tulu-camp-wrapper-full__column-".concat(category, " .sc-tulu-camp-timeline__wrapper"));
          if (categoryWrapper) {
            var status = [];
            var itemObj;
            items.forEach(function (item) {
              if (item.conditional) {
                var classMap = {
                  Y: 'sc-tulu-camp-timeline__box--active',
                  N: 'sc-tulu-camp-timeline__box--progress'
                };
                var value = that.getObjectValue(data, item.key);
                var activeClass = '';
                if (classMap[value]) {
                  activeClass = classMap[value];
                }
                status.push(value);
                if (value) {
                  //Display only if value is Y or N
                  htmlCode += generateHTML(item, activeClass, item.key);
                }
              } else {
                itemObj = item;
              }
            });
            var className = getClassName(status);
            if (className === 'hide') {
              categoryWrapper.closest('.sc-tulu-camp-wrapper-full__column').classList.add('hide');
            } else {
              if (itemObj) {
                htmlCode += generateHTML(itemObj, className, '');
              }
              categoryWrapper.innerHTML = htmlCode;
            }
          }
        });
      } else {
        mainDiversify.querySelector('.sc-tulu-camp-product-card__progress').remove();
        mainDiversify.querySelector('.sc-tulu-camp-product-card__desc').innerText = that.textObj.diversifyText;
        contentDiversify.querySelector('.sc-tulu-camp-wrapper-full-all-set').classList.remove('hide');
        contentDiversify.querySelector('.sc-tulu-camp-wrapper-full__inner').classList.add('hide');
      }
      function generateHTML(item, activeClass, modalKey) {
        var urlAttr = '';
        if (modalKey) {
          urlAttr = item.conditional && activeClass === 'sc-tulu-camp-timeline__box--progress' ? "data-link-url=\"".concat(item.popupCta, "\"") : '';
          if (urlAttr) {
            urlAttr += " data-modal-selector='".concat(modalKey, "'");
          }
        }
        return "<div class=\"sc-tulu-camp-timeline__box ".concat(activeClass, "\" ").concat(urlAttr, ">\n                        <div class=\"sc-tulu-camp-timeline__box-wrapper\">\n                          <div class=\"sc-tulu-camp-timeline__box-title\">\n                            ").concat(item.text, "\n                          </div>\n                          <div class=\"sc-tulu-camp-timeline__box-right\">\n                            <div class=\"sc-tulu-camp-timeline__box-icon\">\n                              <svg width=\"13\" height=\"12\" viewBox=\"0 0 13 12\" fill=\"none\"\n                                xmlns=\"http://www.w3.org/2000/svg\">\n                                <path\n                                  d=\"M6.5 0L7.89583 4.60417L12.5 6L7.89583 7.39583L6.5 12L5.10417 7.39583L0.5 6L5.10417 4.60417L6.5 0Z\"\n                                  fill=\"#939393\"></path>\n                              </svg>\n                            </div>\n                            <p class=\"sc-tulu-camp-timeline__box-text\">\n                            ").concat((0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, item.value), "\n                            </p>\n                          </div>\n                        </div>\n                      </div>");
      }
      function getClassName(status) {
        if (status.every(function (s) {
          return s === 'Y';
        })) {
          return 'sc-tulu-camp-timeline__box--active';
        }
        if (status.includes('Y') || status.includes('N')) {
          return 'sc-tulu-camp-timeline__box--disable';
        }
        if (status.every(function (s) {
          return s === '';
        })) {
          return 'hide';
        }
        return '';
      }
      return valueFound;
    }

    /**
     * Generates the HTML structure for the "Trade Up" section based on data conditions.
     *
     * @function generateTradeUp
     */
  }, {
    key: "generateTradeUp",
    value: function generateTradeUp() {
      var that = this;
      var data = that.commonPlacementData.fields;
      var htmlCode = '';
      var rewardCount = 0;
      var currentRow = 0;
      var totalListGroup = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-tab__content-item-trade-up ul.sc-tulu-camp-progress__inner');
      that.textObj.tradeUp.fields.forEach(function (item) {
        rewardCount += Number(that.getObjectValue(data, item.key));
      });
      if (rewardCount < 18) {
        that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-trade-up .sc-tulu-camp-product-card__bottom .sc-tulu-camp-product-card__task-desc-content').innerText = that.textObj.nextTask.tradeUp.labelText.split('data-number').join((0, _scCommonMethods.getFormattedNumber)(rewardCount + 1));
      } else {
        that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-trade-up .sc-tulu-camp-product-card__bottom').classList.add('hide');
      }
      for (var i = 1; i <= that.textObj.tradeUp.maxCount; i++) {
        var activeClass = '';
        if (rewardCount) {
          if (i <= rewardCount) {
            activeClass = ' sc-tulu-camp-progress__section--completed'; // completed section
          } else if (i === rewardCount + 1) {
            activeClass = ' sc-tulu-camp-progress__section--in-progress'; // current section in progress
          }
        } else if (i === 1) {
          activeClass = ' sc-tulu-camp-progress__section--in-progress';
        }
        var numberText = that.textObj.tradeUp.progressNumber[Math.floor((i - 1) / that.textObj.tradeUp.perRow)]; //get 100, 200, 300

        var counter = i > rewardCount ? "<span>".concat(i, "</span>") : '';
        htmlCode += "<li class=\"sc-tulu-camp-progress__section".concat(activeClass, "\">\n                      <div class=\"sc-tulu-camp-progress__content\">\n                        <div class=\"sc-tulu-camp-progress__circle\">\n                          <svg width=\"21\" height=\"16\" viewBox=\"0 0 21 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M18.8334 2L7.72224 13.6667L2.16675 7.83333\" stroke=\"#0C3A66\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                          </svg>\n                          ").concat(counter, "\n                        </div>\n                        <div class=\"sc-tulu-camp-progress__number\">\n                          <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M6.5 0.5L7.89583 5.10417L12.5 6.5L7.89583 7.89583L6.5 12.5L5.10417 7.89583L0.5 6.5L5.10417 5.10417L6.5 0.5Z\" fill=\"#3BBD77\"></path>\n                          </svg>\n                          <span>").concat((0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, numberText), "</span>\n                        </div>\n                      </div>\n                      <div class=\"sc-tulu-camp-progress__line\"></div>\n                    </li>");
        if (i % that.textObj.tradeUp.perRow === 0) {
          totalListGroup[currentRow].innerHTML = htmlCode;
          htmlCode = '';
          currentRow++;
        }
      }

      //Display Last section
      var closest = that.ScTuluCamp.querySelector('.sc-tulu-camp-tab__content-item-trade-up .sc-tulu-camp-timeline__box');
      closest.classList.remove('sc-tulu-camp-timeline__box--active');
      closest.classList.remove('sc-tulu-camp-timeline__box--progress');
      closest.classList.remove('sc-tulu-camp-timeline__box--disable');
      var contentHTML = '';
      if (rewardCount === that.textObj.tradeUp.maxCount) {
        var allActive = true;
        var totalPoints = 0;
        that.textObj.tradeUp.fields.forEach(function (item) {
          var value = Number(that.getObjectValue(data, item.key));
          if (value) {
            contentHTML += generateHTML(item, ' sc-tulu-camp-progress__section--completed');
            totalPoints += item.points;
          }
        });
        that.textObj.tradeUp.fields.forEach(function (item) {
          var value = Number(that.getObjectValue(data, item.key));
          if (!value) {
            contentHTML += generateHTML(item);
            allActive = false;
          }
        });
        if (closest) {
          allActive ? closest.classList.add('sc-tulu-camp-timeline__box--active') : closest.classList.add('sc-tulu-camp-timeline__box--progress');
          closest.querySelector('.sc-tulu-camp-timeline__box-text span').innerHTML = (0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, totalPoints);
        }
      } else {
        closest.classList.add('sc-tulu-camp-timeline__box--disable');
        that.textObj.tradeUp.fields.forEach(function (item) {
          contentHTML += generateHTML(item);
        });
      }
      closest.querySelector('ul').innerHTML = contentHTML;
      function generateHTML(item) {
        var activeClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        return "<li class=\"sc-tulu-camp-progress__section".concat(activeClass, "\">\n          <div class=\"sc-tulu-camp-progress__content ").concat(item.className, "\">\n            <div class=\"sc-tulu-camp-progress__circle\"></div>\n            <div class=\"sc-tulu-camp-progress__title\">\n              ").concat(item.text, "\n            </div>\n            <div class=\"sc-tulu-camp-progress__number\">\n              <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M6.5 0.5L7.89583 5.10417L12.5 6.5L7.89583 7.89583L6.5 12.5L5.10417 7.89583L0.5 6.5L5.10417 5.10417L6.5 0.5Z\" fill=\"#3BBD77\"></path>\n              </svg>\n              <span>").concat((0, _scCommonMethods.convertNumbers)(that.ScTuluCamp, item.points), "</span>\n            </div>\n          </div>\n        </li>");
      }
    }

    /**
     * Generates the HTML structure for the "Level Up" section based on data conditions.
     *
     * @function generateLevelUp
     */
  }, {
    key: "generateLevelUp",
    value: function generateLevelUp() {
      var that = this;
      var data = that.articlePlacementData;
      var articles = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-tab__content-item-level-up [data-article-id]');
      var articleImg = '';
      var articleModal = '';
      var articleId;
      articles.forEach(function (article) {
        var id = article.getAttribute('data-article-id');
        var articleObj = data.offers.find(function (offer) {
          return offer.fields.some(function (field) {
            return field.name === 'ArticleID' && field.value === id;
          });
        });
        if (articleObj) {
          var classMap = {
            Y: 'sc-tulu-camp-timeline__box--active',
            N: 'sc-tulu-camp-timeline__box--progress'
          };
          var ArticleRead = that.getObjectValue(articleObj.fields, 'ArticleRead');
          var QuizCompleted = that.getObjectValue(articleObj.fields, 'QuizCompleted');
          var timeLineBoxes = article.querySelectorAll('.sc-tulu-camp-timeline__box');
          var articleClass = classMap[ArticleRead];
          if (articleClass) {
            timeLineBoxes[0].classList.add(articleClass);
          }
          var quizClassMap = {
            Y: 'sc-tulu-camp-timeline__box--active',
            N: 'sc-tulu-camp-timeline__box--disable'
          };
          var quizClass = quizClassMap[QuizCompleted];
          if (quizClass) {
            timeLineBoxes[1].classList.add(quizClass);
            if (QuizCompleted === 'N') {
              timeLineBoxes[1].querySelector('.sc-tulu-camp-timeline__box-text').innerText = that.textObj.levelUp.feedbackFailedText;
            }
            article.querySelector('[data-modal-selector]').removeAttribute('data-modal-selector');
          } else {
            timeLineBoxes[1].classList.add('sc-tulu-camp-timeline__box--progress');
            if (!articleImg) {
              articleImg = article.querySelector('.sc-tulu-camp-timeline__cvp-image img').getAttribute('src');
              articleModal = article.querySelector('[data-modal-selector]').getAttribute('data-modal-selector');
              articleId = id;
            }
          }
        }
      });
      if (articleId && articleImg && articleModal) {
        var levelUpNextTask = that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-level-up .sc-tulu-camp-product-card__bottom');
        if (levelUpNextTask) {
          levelUpNextTask.querySelector('.sc-tulu-camp-product-card__task-desc img').setAttribute('src', articleImg);
          var taskValue = that.ScTuluCamp.querySelector('.sc-tulu-camp-product-card-level-up .sc-tulu-camp-product-card__task-value');
          if (taskValue) {
            taskValue.setAttribute('data-modal-selector', articleModal);
            taskValue.setAttribute('data-article-id', articleId);
          }
        }
      }
    }

    /**
     * Handles tab switching by updating active states for tabs and content sections.
     *
     * @function handleTabs
     * @param {string} targetId - The ID of the tab to activate.
     */
  }, {
    key: "handleTabs",
    value: function handleTabs(targetId) {
      var that = this;
      var targetContent = that.ScTuluCamp.querySelectorAll(".sc-tulu-camp-tab__content-item[data-tab-content=\"".concat(targetId, "\"]"));
      if (!targetContent.length) return;

      // Remove active class from all tabs and content items in this tab group
      that.tabs.forEach(function (t) {
        return t.classList.remove('sc-tulu-camp-tab__head-button--active');
      });
      that.contents.forEach(function (c) {
        return c.classList.remove('sc-tulu-camp-tab__content-item--active');
      });

      // Add active class to clicked tab and corresponding content
      var activeTabs = that.ScTuluCamp.querySelectorAll("[data-tab-btn-id=\"".concat(targetId, "\"]"));
      activeTabs.forEach(function (activeTab) {
        if (!activeTab.classList.contains('sc-tooltip')) {
          activeTab.classList.add('sc-tulu-camp-tab__head-button--active');
        }
      });
      targetContent[0].classList.add('sc-tulu-camp-tab__content-item--active');
    }

    /**
     * Handles opening and closing modals, updating UI states, and tracking analytics events.
     *
     * @function handleModal
     */
  }, {
    key: "handleModal",
    value: function handleModal() {
      var that = this;
      //Open Modal
      that.ScTuluCamp.addEventListener('click', function (event) {
        if (event.target.closest('a')) {
          event.preventDefault();
        }
        var modal = event.target.closest('[data-modal-selector]');
        var articleAnchor = event.target.closest('a.sc-tulu-camp-timeline__cvp-title');
        if (modal) {
          var _ref7, _ref8;
          event.preventDefault();
          var selector = modal.getAttribute('data-modal-selector');
          if (selector) {
            var parentModal = event.target.closest('.sc-tulu-camp-modal');
            if (parentModal) {
              that.parentModalId = parentModal.getAttribute('id') || '';
              parentModal.classList.remove('visible');
            }
            var selectedModal = that.ScTuluCamp.querySelector(".".concat(selector));
            if (selectedModal) {
              selectedModal.classList.add('visible');
              document.querySelector('html').classList.add('sc-modal__no-scroll');

              //Activities for questionnaire
              if (selectedModal.closest('.sc-questionnaire')) {
                var feedbackShow = selectedModal.querySelector('.sc-tulu-camp-questionnaire__feedback--show');
                if (feedbackShow) {
                  feedbackShow.classList.remove('sc-tulu-camp-questionnaire__feedback--show');
                }

                //Unchecked all questionnaire radio button
                var questionnaireRadios = selectedModal.querySelectorAll('.sc-questionnaire input[type="radio"]');
                if (questionnaireRadios.length) {
                  questionnaireRadios.forEach(function (radio) {
                    radio.checked = false;
                  });
                }
                var btn = selectedModal.querySelector('.sc-tulu-camp-modal__footer-btn');
                if (btn) {
                  btn.classList.add('sc-tulu-camp-modal__footer-btn--disabled');
                  btn.innerText = btn.getAttribute('data-text-default');
                }
                var article = event.target.closest('[data-article-id]');
                if (article) {
                  that.currentArticleId = article.getAttribute('data-article-id');
                }
              }
            }
          }
          var ctaObj = {
            ctaType: 'button'
          };
          var anchorElement = event.target.closest('a');
          if (anchorElement) {
            var modalSelector = anchorElement.getAttribute('data-modal-selector');
            if (modalSelector === 'sc-guidance' || modalSelector === 'sc-help') {
              Object.assign(ctaObj, {
                ctaPosition: 'middle',
                xLinkRegion: 'middle'
              });
            } else if (modalSelector === 'sc-terms-and-condition') {
              Object.assign(ctaObj, {
                ctaPosition: 'bottom',
                xLinkRegion: 'middle'
              });
            }
          }
          var buttonElement = event.target.closest('button');
          if (buttonElement) {
            var _modalSelector = buttonElement.getAttribute('data-modal-selector');
            if (_modalSelector === 'sc-help') {
              Object.assign(ctaObj, {
                ctaPosition: 'top',
                xLinkRegion: 'right'
              });
            }
          }

          //Next Task
          var nextTaskElement = event.target.closest('.sc-tulu-camp-product-card__bottom');
          if (nextTaskElement) {
            var title = (0, _scCommonMethods.trim)(nextTaskElement.closest('.sc-tulu-camp-product-card').querySelector('.sc-tulu-camp-product-card__title').innerText);
            Object.assign(ctaObj, {
              context: "".concat(title, " next task - ") + (0, _scCommonMethods.trim)(nextTaskElement.querySelector('.sc-tulu-camp-product-card__task-desc').innerText),
              ctaPosition: 'middle',
              xLinkRegion: 'middle'
            });
          }

          //Handle DeepLink
          var deepLink = event.target.closest('[data-link-url]');
          if (deepLink) {
            var _deepLink$closest;
            var _title = '';
            var diversifyNextTask = deepLink.querySelector('.sc-tulu-camp-product-card__task-desc-content');
            var dataContext = (_deepLink$closest = deepLink.closest('.sc-tulu-camp-wrapper-full__column')) === null || _deepLink$closest === void 0 ? void 0 : _deepLink$closest.querySelector('[data-context]');
            if (dataContext) {
              var _deepLink$querySelect;
              //diversify section
              _title = dataContext.getAttribute('data-context');
              var content = (0, _scCommonMethods.trim)(((_deepLink$querySelect = deepLink.querySelector('.sc-tulu-camp-timeline__box-title')) === null || _deepLink$querySelect === void 0 ? void 0 : _deepLink$querySelect.innerText) || '');
              Object.assign(ctaObj, {
                context: "".concat(_title, " - ").concat(content),
                ctaPosition: 'middle',
                xLinkRegion: 'middle'
              });
            } else if (diversifyNextTask) {
              Object.assign(ctaObj, {
                context: (0, _scCommonMethods.trim)(diversifyNextTask.innerText),
                ctaPosition: 'middle',
                xLinkRegion: 'middle'
              });
            }
            var _selectedModal = that.ScTuluCamp.querySelector('.sc-deeplink-modal');
            _selectedModal.classList.add('visible');
            document.querySelector('html').classList.add('sc-modal__no-scroll');
            that.deepLinkUrl = deepLink.getAttribute('data-link-url');
            that.handleDeepLinkModal('diversify', selector);
          }
          if ((_ref7 = (_ref8 = anchorElement !== null && anchorElement !== void 0 ? anchorElement : buttonElement) !== null && _ref8 !== void 0 ? _ref8 : nextTaskElement) !== null && _ref7 !== void 0 ? _ref7 : deepLink) {
            var _ref9, _ref10;
            (0, _scCommonMethods.handleAnalyticsCTA)(event, (_ref9 = (_ref10 = anchorElement !== null && anchorElement !== void 0 ? anchorElement : buttonElement) !== null && _ref10 !== void 0 ? _ref10 : nextTaskElement) !== null && _ref9 !== void 0 ? _ref9 : deepLink, ctaObj);
          }
        } else if (articleAnchor) {
          var _selectedModal2 = that.ScTuluCamp.querySelector('.sc-deeplink-modal');
          _selectedModal2.classList.add('visible');
          document.querySelector('html').classList.add('sc-modal__no-scroll');
          var articleId = articleAnchor.closest('[data-article-id]').getAttribute('data-article-id');
          that.handleDeepLinkModal('article', articleId);
          that.deepLinkUrl = articleAnchor.getAttribute('href');
          (0, _scCommonMethods.handleAnalyticsCTA)(event, '', {
            ctaType: 'button',
            context: 'article link - ' + (0, _scCommonMethods.trim)(articleAnchor.innerText),
            xLinkRegion: 'middle',
            ctaPosition: 'middle'
          });
          that.handleQuizImpression('Clicked', articleId);
        }
      });

      //Close Modal
      var modalCloses = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-modal__close');
      if (modalCloses.length) {
        modalCloses.forEach(function (modalClose) {
          modalClose.addEventListener('click', function (event) {
            if (!event.target.closest('.sc-get-started')) {
              event.target.closest('.sc-tulu-camp-modal').classList.remove('visible');
              if (that.parentModalId) {
                that.ScTuluCamp.querySelector(".".concat(that.parentModalId)).classList.add('visible');
                that.parentModalId = '';
              } else {
                document.querySelector('html').classList.remove('sc-modal__no-scroll');
              }
            }
            var deepLink = event.target.closest('.sc-deeplink-modal');
            var closeBtn = event.target.closest('.sc-tulu-camp-modal--close-btn');
            if (deepLink) {
              window.open(that.deepLinkUrl, '_blank');
              (0, _scCommonMethods.handleAnalyticsCTA)(event, event.target.closest('button'), {
                ctaType: 'button',
                xLinkRegion: 'bottom',
                ctaPosition: 'bottom'
              });
              that.deepLinkUrl = '';
            } else if (event.target.closest('.sc-tulu-camp-modal__footer-btn')) {
              (0, _scCommonMethods.handleAnalyticsCTA)(event, event.target.closest('button'), {
                ctaType: 'button',
                xLinkRegion: 'bottom',
                ctaPosition: 'bottom'
              });
            } else if (closeBtn) {
              (0, _scCommonMethods.handleAnalyticsCTA)(event, event.target.closest('button'), {
                ctaType: 'button',
                xLinkRegion: 'right',
                ctaPosition: 'top'
              });
            } else {
              (0, _scCommonMethods.handleAnalyticsCTA)(event, event.target.closest('button'), {
                ctaType: 'button',
                xLinkRegion: 'left',
                ctaPosition: 'top'
              });
            }
          });
        });
      }

      //handle Download Button
      var downloads = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-modal__download');
      downloads.forEach(function (download) {
        download.addEventListener('click', function (event) {
          (0, _scCommonMethods.handleAnalyticsCTA)(event, event.target.closest('button'), {
            context: 'download',
            ctaType: 'button',
            xLinkRegion: 'right',
            ctaPosition: 'top'
          });
        });
      });
    }

    /**
     * Handles displaying the deep link modal with the appropriate content.
     *
     * @param {string} type - The type of deep link (e.g., "diversify" or "article").
     * @param {string} key - The key or ID used to find the corresponding content.
     */
  }, {
    key: "handleDeepLinkModal",
    value: function handleDeepLinkModal(type, key) {
      var that = this;
      var modalContent = that.ScTuluCamp.querySelector('.sc-deeplink-modal .sc-tulu-camp-doc__content');
      if (type === 'diversify') {
        // eslint-disable-next-line no-unused-vars
        Object.entries(this.textObj.diversify).forEach(function (_ref11) {
          var _ref12 = _slicedToArray(_ref11, 2),
            category = _ref12[0],
            items = _ref12[1];
          items.forEach(function (item) {
            if (item.key === key) {
              modalContent.querySelector('.sc-tulu-camp-doc__title').innerText = item.popupTitle;
              modalContent.querySelector('p').innerText = item.popupDescription;
            }
          });
        });
      } else if (type === 'article') {
        that.textObj.levelUp.articles.forEach(function (item) {
          if (item.articleId === key) {
            modalContent.querySelector('.sc-tulu-camp-doc__title').innerText = item.popupTitle;
            modalContent.querySelector('p').innerText = item.popupDescription;
          }
        });
      }
    }

    /**
     * Generates a SHA-256 hash of a given string.
     * @param {string} message - The input string to hash.
     * @returns {Promise<string>} The SHA-256 hash in hexadecimal format.
     */
  }, {
    key: "sha256",
    value: function () {
      var _sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(message) {
        var msgBuffer, hashBuffer, hashArray;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              msgBuffer = new TextEncoder().encode(message);
              _context4.next = 3;
              return crypto.subtle.digest('SHA-256', msgBuffer);
            case 3:
              hashBuffer = _context4.sent;
              // eslint-disable-next-line no-undef
              hashArray = Array.from(new Uint8Array(hashBuffer));
              return _context4.abrupt("return", hashArray.map(function (b) {
                return b.toString(16).padStart(2, '0');
              }).join(''));
            case 6:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function sha256(_x3) {
        return _sha.apply(this, arguments);
      }
      return sha256;
    }()
    /**
     * Handles tracking of analytics events when FAQ accordion labels are clicked.
     * It sends data related to the clicked FAQ item to the analytics service.
     *
     * @function handleFaqAnalytics
     */
  }, {
    key: "handleFaqAnalytics",
    value: function handleFaqAnalytics() {
      var that = this;
      var labels = that.ScTuluCamp.querySelectorAll('.sc-faq__accordion-label');
      labels.forEach(function (label) {
        label.addEventListener('click', function (event) {
          var closest = event.target.closest('label');
          (0, _scCommonMethods.handleAnalyticsCTA)(event, closest, {
            ctaType: 'button',
            context: 'faq - ' + (0, _scCommonMethods.trim)(closest.innerText),
            xLinkRegion: 'middle',
            ctaPosition: 'middle'
          });
        });
      });
    }

    /**
     * Handles tracking of analytics events when terms and conditions links are clicked.
     * It sends data related to the clicked link to the analytics service.
     *
     * @function handleTermsAnalytics
     */
  }, {
    key: "handleTermsAnalytics",
    value: function handleTermsAnalytics() {
      var that = this;
      var labels = that.ScTuluCamp.querySelectorAll('.sc-faq__terms-link');
      labels.forEach(function (label) {
        label.addEventListener('click', function (event) {
          var closest = event.target.closest('a');
          (0, _scCommonMethods.handleAnalyticsCTA)(event, closest, {
            ctaType: 'button',
            context: 'tnc - ' + (0, _scCommonMethods.trim)(closest.innerText),
            xLinkRegion: 'middle',
            ctaPosition: 'top'
          });
        });
      });
    }

    /**
     * Formats a date string in the format "DD MMM YYYY" from a given input string "MM/DD/YYYY".
     *
     * @param {string} inputDate - The date string in "MM/DD/YYYY" format.
     * @returns {string} The formatted date string in "DD MMM YYYY" format.
     */
  }, {
    key: "formatDate",
    value: function formatDate(inputDate) {
      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

      // Ensure inputDate is a string and extract year, month, and day
      var dateStr = inputDate.toString();
      var year = dateStr.substring(0, 4);
      var month = parseInt(dateStr.substring(4, 6), 10) - 1;
      var day = parseInt(dateStr.substring(6, 8), 10);
      return "".concat(day, " ").concat(months[month], " ").concat(year);
    }

    /**
     * Retrieves the value of a key from an array of objects, where each object has "Name" and "Value" properties.
     *
     * @param {Array} data - The array of objects to search through.
     * @param {string} key - The key to search for in the "Name" property of the objects.
     * @returns {string} The value associated with the key, or an empty string if the key is not found.
     */
  }, {
    key: "getObjectValue",
    value: function getObjectValue(data, key) {
      var _data$find;
      if (!Array.isArray(data)) return ''; // Ensure 'data' is an array
      return ((_data$find = data.find(function (item) {
        return (item === null || item === void 0 ? void 0 : item.name) === key;
      })) === null || _data$find === void 0 ? void 0 : _data$find.value) || '';
    }

    /**
     * Handles the display and interactions of the "Get Started" modal.
     * It shows different content based on a query parameter, manages checkbox states,
     * and sets up event listeners for button clicks and form interactions.
     *
     * @returns {void}
     */
  }, {
    key: "getStartedModal",
    value: function () {
      var _getStartedModal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var that, queryString, tuluParam, value, targetTab, tabContent, campMains, closestMain, headButtons, tabContents, _jsonData2, _jsonData2$data, _jsonData2$data$offer, _jsonData2$data$offer2, jsonData, registrationFlag, buttons, checkboxes;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              that = this;
              queryString = (0, _scCommonMethods.getPageContext)().queryString;
              tuluParam = that.textObj.queryParameterName;
              that.paramExist = false;
              if (tuluParam) {
                value = (0, _scCommonMethods.getQueryParam)(queryString, tuluParam);
                if (value) {
                  targetTab = document.querySelector("[data-tab-content='".concat(value, "']"));
                  if (targetTab) {
                    that.paramExist = true;
                    tabContent = that.ScTuluCamp.querySelector("[data-tab-content='".concat(value, "']"));
                    if (tabContent) {
                      campMains = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-main');
                      campMains.forEach(function (campMain) {
                        campMain.classList.remove('active');
                      });
                      closestMain = tabContent.closest('.sc-tulu-camp-main');
                      if (closestMain) {
                        closestMain.classList.add('active');
                        headButtons = closestMain.querySelectorAll('.sc-tulu-camp-tab__head-button');
                        headButtons.forEach(function (headButton) {
                          headButton.classList.remove('sc-tulu-camp-tab__head-button--active');
                        });
                        closestMain.querySelector("[data-tab-btn-id='".concat(value, "']")).classList.add('sc-tulu-camp-tab__head-button--active');
                      }
                      tabContents = that.ScTuluCamp.querySelectorAll('[data-tab-content]');
                      tabContents.forEach(function (tabContent) {
                        tabContent.classList.remove('sc-tulu-camp-tab__content-item--active');
                      });
                      that.ScTuluCamp.querySelector("[data-tab-content='".concat(value, "']")).classList.add('sc-tulu-camp-tab__content-item--active');
                    }
                  }
                }
              }
              if (!that.paramExist) {
                _context5.next = 7;
                break;
              }
              return _context5.abrupt("return");
            case 7:
              _context5.prev = 7;
              _context5.next = 10;
              return this.fetchApiData('https://av.sc.com/global/assets/js/tulu/rewards_registration.json');
            case 10:
              jsonData = _context5.sent;
              // jsonData = await this.getDataFromJsBridge(
              //   that.textObj.registrationPlacementId
              // );
              // jsonData = JSON.parse(jsonData);
              that.regPlacementData = ((_jsonData2 = jsonData) === null || _jsonData2 === void 0 ? void 0 : (_jsonData2$data = _jsonData2.data) === null || _jsonData2$data === void 0 ? void 0 : (_jsonData2$data$offer = _jsonData2$data.offers) === null || _jsonData2$data$offer === void 0 ? void 0 : (_jsonData2$data$offer2 = _jsonData2$data$offer.offers) === null || _jsonData2$data$offer2 === void 0 ? void 0 : _jsonData2$data$offer2[0]) || {};
              registrationFlag = that.getObjectValue(that.regPlacementData.fields, 'RegistrationFlag');
              if (registrationFlag === 'Y') {
                //Three
                that.ScTuluCamp.querySelector('.sc-get-started-yes').classList.add('visible');
              } else {
                that.ScTuluCamp.querySelector('.sc-get-started-no').classList.add('visible');
              }
              document.querySelector('html').classList.add('sc-modal__no-scroll');
              _context5.next = 20;
              break;
            case 17:
              _context5.prev = 17;
              _context5.t0 = _context5["catch"](7);
              console.error('Error fetching consolidate data:', _context5.t0);
            case 20:
              buttons = that.ScTuluCamp.querySelectorAll('.sc-get-started .sc-tulu-camp-modal__footer .sc-btn--medium');
              if (buttons.length) {
                buttons.forEach(function (button) {
                  button.addEventListener('click', function (event) {
                    if (!event.target.closest('button').classList.contains('sc-tulu-camp-modal__footer-btn--disabled')) {
                      event.target.closest('.sc-get-started').classList.remove('visible');
                      document.querySelector('html').classList.remove('sc-modal__no-scroll');
                      (0, _scCommonMethods.handleAnalyticsCTA)(event, event.target.closest('button'), {
                        ctaType: 'button',
                        ctaPosition: 'bottom',
                        xLinkRegion: 'middle'
                      });
                      that.handleRegistrationImpression('Clicked', that.regPlacementData.feedback);
                    }
                  });
                });
              }
              checkboxes = that.ScTuluCamp.querySelectorAll(".sc-get-started input[type='checkbox']");
              if (checkboxes.length) {
                checkboxes.forEach(function (checkbox) {
                  checkbox.addEventListener('change', function (event) {
                    var button = event.target.closest('.sc-get-started').querySelector('.sc-tulu-camp-modal__footer .sc-btn--medium');
                    if (event.target.checked) {
                      button.classList.remove('sc-tulu-camp-modal__footer-btn--disabled');
                    } else {
                      button.classList.add('sc-tulu-camp-modal__footer-btn--disabled');
                    }
                  });
                });
              }
            case 24:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this, [[7, 17]]);
      }));
      function getStartedModal() {
        return _getStartedModal.apply(this, arguments);
      }
      return getStartedModal;
    }()
    /**
     * Handles the "Asia Miles Yes" modal interactions, including switching between main pages
     * and managing the "back" button functionality. This function is responsible for the user
     * flow between product cards and the main page. It also tracks button clicks for analytics.
     *
     * @returns {void}
     */
  }, {
    key: "asiaMilesYesModal",
    value: function asiaMilesYesModal() {
      var that = this;
      var startButton = document.getElementById('sc-get-started-btn');
      var tcModal = document.getElementById('sc-terms-and-condition');
      var cardMain = document.querySelectorAll('.sc-tulu-camp-product-card__main');
      var mainPage = document.querySelectorAll('.sc-tulu-camp-main');
      var backBtn = document.querySelector('.sc-tulu-camp-header__back');
      var taskDesk = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-product-card__bottom');
      if (startButton && tcModal) {
        cardMain.forEach(function (card) {
          card.addEventListener('click', function () {
            mainPage[0].classList.remove('active');
            mainPage[1].classList.add('active');
          });
        });
        taskDesk.forEach(function (el) {
          el.addEventListener('click', function (event) {
            var closest = event.target.closest('[data-link-url]');
            if (!closest) {
              mainPage[0].classList.remove('active');
              mainPage[1].classList.add('active');
            }
            (0, _scCommonMethods.handleAnalyticsCTA)(event, el, {
              ctaType: 'button',
              ctaPosition: 'middle',
              xLinkRegion: 'middle',
              context: (0, _scCommonMethods.trim)(event.target.closest('.sc-tulu-camp-product-card__bottom').querySelector('.sc-tulu-camp-product-card__task-desc-content').innerText)
            });
          });
        });
        backBtn.addEventListener('click', function (event) {
          if (mainPage[0].className.includes('active')) {
            window.location = 'https://www.sc.com/exit';
          } else {
            mainPage[1].classList.remove('active');
            mainPage[0].classList.add('active');
            document.querySelector("[data-tab-btn-id='1']").classList.add('sc-tulu-camp-tab__head-button--active');
            document.querySelector("[data-tab-content='1']").classList.add('sc-tulu-camp-tab__content-item--active');
            var closestBtn = event.target.closest('button');
            if (closestBtn) {
              (0, _scCommonMethods.handleAnalyticsCTA)(event, closestBtn, {
                ctaType: 'button',
                ctaPosition: 'top',
                xLinkRegion: 'middle'
              });
            }
          }
        });
      }
    }

    /**
     * Asynchronously loads article data from an API and processes it.
     *
     * @async
     * @function loadArticleDataApi
     * @returns {Promise<void>} A promise that resolves when the data is loaded and processed.
     * @throws {Error} Logs an error if the API request fails.
     */
  }, {
    key: "loadArticleDataApi",
    value: function () {
      var _loadArticleDataApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var that, _jsonData3, _jsonData3$data, jsonData;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              that = this;
              _context6.prev = 1;
              _context6.next = 4;
              return this.fetchApiData('https://av.sc.com/global/assets/js/tulu/levelup.json');
            case 4:
              jsonData = _context6.sent;
              // jsonData = await this.getDataFromJsBridge(
              //   that.textObj.articlePlacementId
              // );
              // jsonData = JSON.parse(jsonData);
              that.articlePlacementData = ((_jsonData3 = jsonData) === null || _jsonData3 === void 0 ? void 0 : (_jsonData3$data = _jsonData3.data) === null || _jsonData3$data === void 0 ? void 0 : _jsonData3$data.offers) || {};
              that.generateLevelUp();
              that.levelUpEarningHistory();

              // Do something with the fetched data, if needed
              _context6.next = 13;
              break;
            case 10:
              _context6.prev = 10;
              _context6.t0 = _context6["catch"](1);
              console.error('Error fetching consolidate data:', _context6.t0);
            case 13:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[1, 10]]);
      }));
      function loadArticleDataApi() {
        return _loadArticleDataApi.apply(this, arguments);
      }
      return loadArticleDataApi;
    }()
    /**
     * Generates a formatted date string for a campaign cycle.
     *
     * @param {string} campaignStartDate - The start date of the campaign in "MM/DD/YYYY" format.
     * @param {string} campaignEndDate - The end date of the campaign in "MM/DD/YYYY" format.
     * @returns {string} - A formatted string in the format:
     *                     "As of DD MMM YYYY (DD MMM YYYY - DD MMM YYYY Cycle)"
     *                     Example: "As of 17 Mar 2025 (01 Jan - 31 Mar 2025 Cycle)"
     */
  }, {
    key: "generateDateString",
    value: function generateDateString(campaignStartDate, campaignEndDate) {
      campaignStartDate = new Date(campaignStartDate);
      // eslint-disable-next-line no-unused-vars
      campaignEndDate = new Date(campaignEndDate);
      var currentDate = new Date(); // Today's date

      // Function to format date as "DD MMM YYYY"
      var formatDate = function formatDate(date) {
        return !isNaN(date.getTime()) // Check if date is valid
        ? date.toLocaleDateString('en-GB', {
          day: '2-digit',
          month: 'short',
          year: 'numeric'
        }) : 'Invalid Date';
      }; // Handle invalid dates

      // Generate and return the formatted string
      // return `As of ${formatDate(currentDate)} (${formatDate(
      //   campaignStartDate
      // )} - ${formatDate(campaignEndDate)} Cycle)`;

      return "As of ".concat(formatDate(currentDate));
    }
  }, {
    key: "handleTabsContent",
    value: function handleTabsContent() {
      var that = this;
      // Get all the tabs in this tab group
      that.tabs = that.ScTuluCamp.querySelectorAll('[data-tab-btn-id]');
      // Get all the content items in this tab group
      that.contents = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-tab__content-item');
      that.tabs.forEach(function (tab) {
        tab.addEventListener('click', function (event) {
          var targetId = tab.getAttribute('data-tab-btn-id');
          that.handleTabs(targetId);
          var wrapperInner = event.target.closest('.sc-tulu-camp__wrapper-inner');
          var closestBtn = event.target.closest('button');
          var closestPdt = event.target.closest('.sc-tulu-camp-product-card__main');
          if (wrapperInner) {
            (0, _scCommonMethods.handleAnalyticsCTA)(event, wrapperInner, {
              ctaType: 'button',
              xLinkRegion: 'middle',
              ctaPosition: 'top',
              context: event.target.innerText
            });
          } else if (closestBtn) {
            (0, _scCommonMethods.handleAnalyticsCTA)(event, closestBtn, {
              ctaType: 'button',
              xLinkRegion: 'middle',
              ctaPosition: 'top'
            });
          } else if (closestPdt) {
            (0, _scCommonMethods.handleAnalyticsCTA)(event, '', {
              context: (0, _scCommonMethods.trim)(closestPdt.querySelector('.sc-tulu-camp-product-card__title').innerText),
              ctaType: 'button',
              xLinkRegion: 'middle',
              ctaPosition: 'middle'
            });
          }
        });
      });
    }

    /**
     * Handles interactions with the questionnaire form, including radio button changes, label clicks,
     * and the continue button functionality. It also manages the feedback display and tracking analytics events.
     *
     * @function handleQuestionnaire
     */
  }, {
    key: "handleQuestionnaire",
    value: function handleQuestionnaire() {
      var that = this;
      //questionnaire radio
      var questionnaireRadios = that.ScTuluCamp.querySelectorAll('.sc-questionnaire input[type="radio"]');
      if (questionnaireRadios.length) {
        questionnaireRadios.forEach(function (questionnaireRadio) {
          questionnaireRadio.addEventListener('change', function (event) {
            event.target.closest('.sc-tulu-camp-questionnaire').querySelector('.sc-tulu-camp-modal__footer-btn').classList.remove('sc-tulu-camp-modal__footer-btn--disabled');
          });
        });
      }
      var questionnaireLabels = that.ScTuluCamp.querySelectorAll('.sc-questionnaire .sc-radio-box__input-label');
      if (questionnaireLabels.length) {
        questionnaireLabels.forEach(function (questionnaireLabel) {
          questionnaireLabel.addEventListener('click', function (event) {
            event.target.closest('.sc-tulu-camp-questionnaire').querySelector('.sc-tulu-camp-modal__footer-btn').classList.remove('sc-tulu-camp-modal__footer-btn--disabled');
          });
        });
      }
      var continueButtons = that.ScTuluCamp.querySelectorAll('.sc-tulu-camp-questionnaire__btn .sc-tulu-camp-modal__footer-btn');
      var completed = false;
      continueButtons.forEach(function (continueButton) {
        continueButton.addEventListener('click', /*#__PURE__*/function () {
          var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(event) {
            var closest, checkedRadio, _that$textObj$levelUp, hash, result, context, feedback, article, _article;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  closest = event.target.closest('.sc-questionnaire');
                  checkedRadio = closest.querySelector("[type='radio']:checked");
                  if (!checkedRadio) {
                    _context7.next = 12;
                    break;
                  }
                  _context7.next = 5;
                  return that.sha256(checkedRadio.value);
                case 5:
                  hash = _context7.sent;
                  result = ((_that$textObj$levelUp = that.textObj.levelUp.articles.find(function (item) {
                    return item.articleId === that.currentArticleId;
                  })) === null || _that$textObj$levelUp === void 0 ? void 0 : _that$textObj$levelUp.quizValue) || null;
                  feedback = closest.querySelector('.sc-tulu-camp-questionnaire__feedback');
                  if (completed) {
                    context = 'continue';
                    event.target.closest('.sc-tulu-camp-modal').classList.remove('visible');
                    document.querySelector('html').classList.remove('sc-modal__no-scroll');
                    completed = false;
                  } else if (hash === result) {
                    //Correct Answer
                    context = event.target.getAttribute('data-text-continue');
                    event.target.innerText = context;
                    feedback.classList.add('sc-tulu-camp-questionnaire__feedback--success');
                    feedback.innerHTML = that.textObj.levelUp.feedbackSuccess;
                    context = 'submit - correct';
                    completed = true;
                    article = that.ScTuluCamp.querySelector("[data-article-id='".concat(that.currentArticleId, "'] [data-modal-selector]"));
                    if (article) {
                      article.classList.add('sc-tulu-camp-timeline__box--active');
                      // article.querySelector(
                      //   ".sc-tulu-camp-timeline__box-title"
                      // ).innerText = that.textObj.levelUp.feedbackSuccessDesc;
                      article.removeAttribute('data-modal-selector');
                    }
                    that.handleQuizImpression('Clicked');
                  } else {
                    context = event.target.getAttribute('data-text-continue');
                    event.target.innerText = context;
                    feedback.classList.add('sc-tulu-camp-questionnaire__feedback--error');
                    feedback.innerHTML = that.textObj.levelUp.feedbackError;
                    context = 'submit - incorrect';
                    completed = true;
                    _article = that.ScTuluCamp.querySelector("[data-article-id='".concat(that.currentArticleId, "'] [data-modal-selector]"));
                    if (_article) {
                      _article.classList.add('sc-tulu-camp-timeline__box--disable');
                      // article.querySelector(
                      //   ".sc-tulu-camp-timeline__box-title"
                      // ).innerText = that.textObj.levelUp.feedbackFailedDesc;
                      _article.querySelector('.sc-tulu-camp-timeline__box-text').innerText = that.textObj.levelUp.feedbackFailedText;
                      _article.removeAttribute('data-modal-selector');
                    }
                    that.handleQuizImpression('Dismissed');
                  }
                  closest.querySelector('.sc-tulu-camp-questionnaire__test-text span').innerText = 2;
                  closest.querySelectorAll('.sc-radio-box__input').forEach(function (radio) {
                    radio.disabled = true;
                  });
                  (0, _scCommonMethods.handleAnalyticsCTA)(event, closest, {
                    ctaType: 'button',
                    context: context,
                    xLinkRegion: 'middle',
                    ctaPosition: 'bottom'
                  });
                case 12:
                case "end":
                  return _context7.stop();
              }
            }, _callee7);
          }));
          return function (_x4) {
            return _ref13.apply(this, arguments);
          };
        }());
      });
    }

    /**
     * Sends a quiz impression update request via Cordova.
     *
     * This function checks for the specific article based on the current article ID,
     * and sends an impression update including details like article name, group, rank, and the outcome.
     *
     * @param {string} outcome - The outcome of the quiz impression, e.g., "Clicked" or "Dismissed".
     * @returns {void} - Does not return anything.
     */
  }, {
    key: "handleQuizImpression",
    value: function handleQuizImpression(outcome) {
      var articleId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      if (!window.cordova) return;
      var that = this;
      articleId = articleId || that.currentArticleId;
      // Find the correct article object
      var articleObj = that.articlePlacementData.offers.find(function (obj) {
        return obj.fields.some(function (field) {
          return field.name === 'ArticleID' && field.value === articleId;
        });
      });
      if (!articleObj) {
        console.error("Error: No matching article found for ArticleID: ".concat(articleId));
        return;
      }

      // Build the Impression Header based on the country
      var ImpressionHeader = {
        'X-APOLLO-OPERATION-NAME': 'updateImpression'
      };
      if ((0, _scCommonMethods.getCurrentCountry)() === 'hk') {
        var icm_id = sessionStorage.getItem('icmpid') || ''; // Ensure no null value
        ImpressionHeader['icm-id'] = icm_id;
      }

      // Construct the request payload
      var requestPayload = {
        operationName: 'updateImpression',
        variables: {
          input: {
            name: articleObj.feedback.name,
            group: articleObj.feedback.group,
            interactionId: articleObj.feedback.interactionId,
            issue: articleObj.feedback.issue,
            placement: articleObj.feedback.placement,
            rank: articleObj.feedback.rank,
            outcome: outcome // Clicked/Dismissed
          }
        },

        query: "mutation updateImpression($input: CustomerOfferFeedbackInput!) { \n            updateImpression(feedback: $input) { \n                __typename \n                status \n                message \n            } \n        }"
      };

      // Execute the Cordova function
      window.cordova.exec(function (response) {
        return console.log('Success 1:', response);
      },
      // No need for JSON.stringify
      function (error) {
        return console.log('Error 1:', error);
      }, 'gqlplugin',
      // Plugin name
      'request',
      // Function name
      [JSON.stringify(requestPayload), JSON.stringify(ImpressionHeader), 'POST']);
    }

    /**
     * Sends a registration impression update request via Cordova.
     *
     * @param {string} outcome - The outcome of the impression (e.g., "Clicked" or "Dismissed").
     * @returns {void} - Does not return anything.
     */
  }, {
    key: "handleRegistrationImpression",
    value: function handleRegistrationImpression(outcome, obj) {
      if (!window.cordova) return;
      var ImpressionHeader = {
        'X-APOLLO-OPERATION-NAME': 'updateImpression'
      };
      if ((0, _scCommonMethods.getCurrentCountry)() === 'hk') {
        var icm_id = sessionStorage.getItem('icmpid') || ''; // Default to empty string if null
        ImpressionHeader['icm-id'] = icm_id;
      }
      var requestPayload = {
        operationName: 'updateImpression',
        variables: {
          input: {
            name: obj.name,
            group: obj.group,
            interactionId: obj.interactionId,
            issue: obj.issue,
            placement: obj.placement,
            rank: obj.rank,
            outcome: outcome // Clicked/Dismissed
          }
        },

        query: "mutation updateImpression($input: CustomerOfferFeedbackInput!) { \n            updateImpression(feedback: $input) { \n                __typename \n                status \n                message \n            } \n        }"
      };
      window.cordova.exec(function (response) {
        return console.log('Success 2:', response);
      },
      // Response is already JSON
      function (error) {
        return console.log('Error 2:', error);
      }, 'gqlplugin',
      // Plugin name
      'request',
      // Function name
      [JSON.stringify(requestPayload), JSON.stringify(ImpressionHeader), 'POST']);
    }
  }]);
  return ScTuluCampaign;
}();
var instance = new ScTuluCampaign();
window.addEventListener('load', function () {
  instance.init();
});
var _default = instance;
exports.default = _default;

},{"../../../js/sc-common-methods":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateInputNoSlider = exports.validateInput = exports.vLookup = exports.urlBreakdown = exports.trim = exports.triggerPopupViewedTagging = exports.stepFieldErrorStatus = exports.smoothScroll = exports.sliderFieldErrorStatus = exports.sliderErrorStatus = exports.shouldCarryTrackingParams = exports.setLocalStorageWithExpiry = exports.pmt = exports.parseUrl = exports.matchHeight = exports.isMobile = exports.isInternalDomain = exports.isForm = exports.isEmpty = exports.initializeSlider = exports.handleProductsObj = exports.handleProductCalculatorSubmit = exports.handlePersistentBarScroll = exports.handleCalculatorAnalytics = exports.handleAnalyticsCTA = exports.getUrlParamName = exports.getQueryParam = exports.getPosition = exports.getPageUrl = exports.getPageContext = exports.getOuterHeight = exports.getLocalStorageWithExpiry = exports.getIntExtCampaignInfo = exports.getHorizontalPosition = exports.getFormattedNumber = exports.getDeviceDetails = exports.getCurrentEnvironment = exports.getCurrentCountry = exports.getCtaType = exports.getCtaContext = exports.getCookie = exports.getCampaignInfoV2 = exports.getCampaignInfoV1 = exports.getCampaignInfo = exports.getAssetDomain = exports.getAccordionHeading = exports.formatNumbersWithTwoDecimalPlaces = exports.extractQueryParams = exports.extendedPMT = exports.extend = exports.detectOS = exports.debounceEvents = exports.daysInThisMonth = exports.convertQueryStringToJsonObject = exports.convertNumbers = exports.convertMonthsToYearsAndMonths = exports.calculateYearMonth = exports.calculateRanges = exports.calculatePresentValue = exports.calculatePMT = exports.calculateNPER = exports.calculateIRR = exports.calculateFutureValue = exports.calculateEIR = exports.calculateDerivative = exports.calcElementLocation = exports.bundleParam = exports.browserDetect = exports.applyCookieParams = void 0;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable no-useless-escape */
/* global digitalData, scAnalyticsDataArray, _satellite, noUiSlider */
if (!window.scCommonConstants) {
  window.scCommonConstants = {
    DEVELOPMENT: 'development',
    PREVIEW: 'preview',
    PRODUCTION: 'production',
    STAGING: 'staging',
    PERSONAL: 'personal',
    PRIORITY: 'priority',
    BUSINESS: 'business',
    CORPORATE: 'corporate',
    PRIVATE: 'private',
    COMMERCIAL: 'commercial',
    LANGUAGES: ['en', 'zh'],
    ALLOWABLE_QUERYSTRING: {
      scb: ['subChanCode', 'camp_id', 'pid', 'promoCode', 'promo', 'referId', 'instance', 'state', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'GiPrm', 'productName', 'truspleBuyerId', 'CTID'],
      others: ['gclid', 'gclsrc'],
      'partner-urls': ['https://www.royalsundaram.in/.*', 'https://www.maxbupa.com/.*', 'https://www.bharti-axagi.co.in/.*', 'https://www.iciciprulife.com/.*', 'https://www.einsure.allianz.com.sg/.*', 'https://www.allianz-travel-insure.com.sg/.*', 'https://www.lin.ee/.*', 'https://www.piapp.com/.*']
    },
    URL_OBJ: ['cmsdev', 'preview', 'standardchartered', 'sc', 'com', 'av', 'assets', 'global', 'development', 'staging', 'digital', 'https', 'cmsstage', 'cms', 'dev', 'zoo']
  };
}
/**
 * Breaks down a given URL into its components.
 * @param {string} currentURL - The URL to be broken down.
 * @returns {Object} An object representing the components of the URL.
 */
var urlBreakdown = function urlBreakdown(currentURL) {
  var parser = parseUrl(currentURL);
  var queryString = parser.search,
    parts = parser.pathname.split('/'),
    hash = parser.hash,
    countryMapping = {
      sgbeta: 'sg'
    };
  if (queryString && queryString.indexOf('?') === 0) {
    queryString = queryString.slice(1);
  }
  var pageURL = {
    domain: null,
    country: null,
    language: null,
    category: null,
    segment: 'personal',
    subcategory: null,
    slug: null,
    queryString: queryString,
    hash: null,
    pathname: document.location.pathname
  };
  pageURL.domain = parser.hostname;
  pageURL.country = parts[1];
  pageURL.language = 'en';
  if (pageURL.country === 'cn' || pageURL.country === 'tw') {
    pageURL.language = 'zh';
  }
  if (parts[2]) {
    pageURL.category = parts[2];
    if (parts[2].length === 2) {
      pageURL.language = parts[2];
      pageURL.category = parts[3];
    }
  }
  if (parts[parts.length - 1] !== '' && parts[parts.length - 1] !== 'index.html') {
    pageURL.slug = parts[parts.length - 1];
  } else {
    pageURL.slug = parts[parts.length - 2];
  }
  if (pageURL.slug) {
    if (pageURL.slug.indexOf('.') !== -1) {
      var slugger = pageURL.slug.split('.');
      pageURL.name = slugger[0];
      pageURL.extension = slugger[1];
    } else {
      pageURL.name = pageURL.slug;
      pageURL.extension = '';
    }
  } else {
    pageURL.slug = '';
    pageURL.name = '';
    pageURL.extension = '';
  }
  if (parts.length <= 4 && window.scCommonConstants.LANGUAGES.indexOf(pageURL.slug) !== -1) {
    pageURL.slug = pageURL.country;
  }
  if (hash) {
    pageURL.hash = hash;
  }
  if (parts.length >= 5) {
    pageURL.subcategory = parts[3];
  }
  if (pageURL.pathname && pageURL.pathname.indexOf('priority') !== -1) {
    pageURL.segment = 'priority';
  } else if (pageURL.pathname && pageURL.pathname.indexOf('business') !== -1) {
    pageURL.segment = 'business';
  }
  if (countryMapping[pageURL.country]) {
    pageURL.country = countryMapping[pageURL.country];
  }
  return pageURL;
};

/**
 * Parses a URL and returns its components.
 * @param {string} url - The URL to parse.
 * @returns {Object} An object representing the parsed URL components.
 */
exports.urlBreakdown = urlBreakdown;
var parseUrl = function parseUrl(url) {
  var parser = document.createElement('a');
  parser.href = url;
  if (parser.protocol != 'mailto:') {
    var link_path = '/' === parser.pathname.charAt(0) ? parser.pathname : '/' + parser.pathname;
  } else {
    link_path = parser.pathname;
  }
  return {
    href: parser.href,
    protocal: parser.protocol,
    hostname: parser.hostname,
    port: parser.port,
    pathname: parser.hash.indexOf('?') !== -1 ? link_path + parser.hash : link_path,
    rawpath: link_path,
    query: parser.query || parser.search,
    search: parser.query || parser.search,
    hash: parser.hash,
    host: parser.host
  };
};

/**
 * Retrieves the page context from meta tags and URL breakdown.
 * @returns {Object} An object representing the page context.
 */
exports.parseUrl = parseUrl;
var getPageContext = function getPageContext() {
  var $title = document.title;
  var $country = document.querySelector('meta[name="sc:country"]');
  var $language = document.querySelector('meta[name="sc:language"]');
  var $segment = document.querySelector('meta[name="sc:segment"]');
  var $category = document.querySelector('meta[name="sc:categories"]');
  var $subcategory = document.querySelector('meta[name="sc:subcategories"]');
  var $slug = document.querySelector('meta[name="sc:page-slug"]');
  var pageContext = {
    title: null,
    country: null,
    language: null,
    segment: null,
    category: null,
    subcategory: null,
    slug: null
  };
  if ($title) {
    pageContext.title = $title;
  }
  if ($country) {
    pageContext.country = $country.getAttribute('content');
  }
  if ($language) {
    pageContext.language = $language.getAttribute('content');
  }
  if (!pageContext.language) {
    var docLang = document.documentElement.lang;
    if (docLang) {
      // Document language can be in languageCode-countryCode format, e.g en-US.
      // In front-end context, we don't need countryCode part
      pageContext.language = docLang.split('-')[0].toLowerCase();
    }
  }
  if ($segment) {
    pageContext.segment = $segment.getAttribute('content');
  }
  if ($category) {
    pageContext.category = $category.getAttribute('content');
  }
  if ($subcategory) {
    pageContext.subcategory = $subcategory.getAttribute('content');
  }
  if ($slug) {
    pageContext.slug = $slug.getAttribute('content');
  }
  return extend(urlBreakdown(window.location.href), pageContext);
};

/**
 * Extends an object with properties from another object.
 * @param {Object} obj - The object to extend.
 * @param {Object} src - The object providing the new properties.
 * @returns {Object} The extended object.
 */
exports.getPageContext = getPageContext;
var extend = function extend(obj, src) {
  Object.keys(src).forEach(function (key) {
    obj[key] = src[key];
  });
  return obj;
};

/**
 * Gets the current country from the page context or URL.
 * @returns {string} The current country.
 */
exports.extend = extend;
var getCurrentCountry = function getCurrentCountry() {
  var pageContext = getPageContext();
  if (pageContext.country) {
    return pageContext.country;
  }
  return urlBreakdown(window.location.href).country;
};

/**
 * Trims whitespace from a given text.
 * @param {string} text - The text to trim.
 * @returns {string} The trimmed text.
 */
exports.getCurrentCountry = getCurrentCountry;
var trim = function trim(text) {
  if (text) {
    return text.trim();
  }
  return text;
};

/**
 * will moved this function to ExternalLinksDisclaimer once migration complete
 *
 * @param {String} domain domain name
 * @example
 * isInternalDomain('www.sc.com')
 */
exports.trim = trim;
var isInternalDomain = function isInternalDomain(domain, ctaUrl) {
  if (isForm(ctaUrl)) {
    return true;
  }
  // List of all regular expression for internal domains
  var internal = [/^myinfosg.api.gov.sg$/, /^sc.com$/, /^.*\.sc\.com$/, /^standardchartered.com$/, /^.*\.standardchartered\.com/, /^.*\.standardchartered\.com\..*/, /^standardchartered\.co\..*$/, /^.*\.standardchartered\.co\..*$/, /www.wowmanhattan.com.sg/, /saml.singpass.gov.sg/, /scb-sg.onelink.me/, /#null/];
  for (var i = 0; i < internal.length; i++) {
    if (internal[i].test(domain)) {
      return true;
    }
  }
  var partnerUrls = window.scCommonConstants.ALLOWABLE_QUERYSTRING['partner-urls'];
  if (!Array.isArray(partnerUrls) || partnerUrls.length === 0) {
    return false; // No URLs to check
  }

  var partnerStatus = partnerUrls.some(function (url) {
    return new RegExp("^".concat(url.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')), 'i').test(ctaUrl);
  });
  if (!partnerStatus && !document.querySelector('[data-modal-id="external-links-disclaimer"]')) {
    //No disclaimer code added, so directly go to the clicked URL
    return true;
  }
  return partnerStatus;
};

/**
 * capture horizontal click position and return it's left or right
 * @param {Number} xClick horizontal click position
 * @return {String} return it's left or right
 * @example
 * getHorizontalPosition(1000)
 */
exports.isInternalDomain = isInternalDomain;
var getHorizontalPosition = function getHorizontalPosition(xClick) {
  if (!xClick) return 'left';
  var maxWidth = Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.documentElement.clientWidth);
  var mktCountryCode = getCurrentCountry();
  if (mktCountryCode !== 'hk' && mktCountryCode !== 'sg') {
    var median = maxWidth / 2;
    return xClick < median ? 'left' : 'right';
  }

  //Sorted array of positions
  var positions = [{
    name: 'left',
    depth: 30
  }, {
    name: mktCountryCode === 'sg' ? 'center' : 'middle',
    depth: 70
  }, {
    name: 'right',
    depth: 100
  }];
  var scrollDepth = xClick * 100 / maxWidth;
  for (var i = 0; i < positions.length; i++) {
    if (scrollDepth < positions[i].depth) {
      return positions[i].name;
    }
  }
};

/**
 * return cookie value
 * @param {String} key is the name of the cookie
 * @return {String} return selected cookie value
 * @example
 * getCookie('subChanCode')
 */
exports.getHorizontalPosition = getHorizontalPosition;
var getCookie = function getCookie(key) {
  var name = key + '=';
  var decodedCookie;
  try {
    //The decodeURIComponent function can throw an error if the cookie value contains invalid encoding, which might happen if special characters are improperly encoded. To fix this, you can add a try-catch block around decodeURIComponent to handle any decoding errors gracefully.
    decodedCookie = decodeURIComponent(document.cookie);
  } catch (e) {
    return null;
  }
  var ca = decodedCookie.split(';');
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return null;
};

/**
 * Method to get localstorage value.
 * @param {string} key
 */
exports.getCookie = getCookie;
var getLocalStorageWithExpiry = function getLocalStorageWithExpiry(key) {
  var itemStr = localStorage.getItem(key);
  // if the item doesn't exist, return null
  if (!itemStr) {
    return null;
  }
  var item = JSON.parse(itemStr);
  var now = new Date();
  // compare the expiry time of the item with the current time
  if (now.getTime() > item.expiry) {
    // If the item is expired, delete the item from storage
    // and return null
    localStorage.removeItem(key);
    return null;
  }
  return item.value;
};

/**
 * calculate vertical position
 * @param {Event} target event of the selector
 * @return {String} return top, middle, bottom, persistent-bar, lightbox etc.
 * @example
 * calcElementLocation(event)
 */

// CTA Postion
exports.getLocalStorageWithExpiry = getLocalStorageWithExpiry;
var calcElementLocation = function calcElementLocation(target) {
  var _ref, _target$closest, _ref2, _ref3, _ref4, _ref5, _ref6, _target$closest2;
  if (!target) return '';
  if (target.closest('.c-modal') || target.closest('.sc-modal')) {
    return 'middle';
  }
  if (typeof target.className === 'string' && typeof target.className.includes !== 'undefined' && (target.className.indexOf('sc-card-comparator__compare-btn') !== -1 || target.className.indexOf('sc-card-comparator__card-remove') !== -1)) {
    return 'bottom';
  }
  var closestTarget = (_ref = (_target$closest = target.closest('a')) !== null && _target$closest !== void 0 ? _target$closest : target.closest('label')) !== null && _ref !== void 0 ? _ref : target;
  var fromTop = parseInt(getPosition(closestTarget), 10) * 100;
  if ((_ref2 = (_ref3 = (_ref4 = (_ref5 = (_ref6 = (_target$closest2 = target.closest('.sc-persistent-bar')) !== null && _target$closest2 !== void 0 ? _target$closest2 : target.closest('.m-persistent-bootom-bar')) !== null && _ref6 !== void 0 ? _ref6 : target.closest('.sc-wealthsaver-calc__sticky')) !== null && _ref5 !== void 0 ? _ref5 : target.closest('.sc-ft-calc__sticky')) !== null && _ref4 !== void 0 ? _ref4 : target.closest('.sc-miles-calc__total-result--sticky')) !== null && _ref3 !== void 0 ? _ref3 : target.closest('.sc-bundled-products__sticky-outer')) !== null && _ref2 !== void 0 ? _ref2 : target.closest('.sc-bundled-products-sticky__sticky')) {
    //Persistent bar in the bottom
    fromTop = parseInt(window.scrollY + window.innerHeight, 10) * 100;
  } else if (target.closest('.m-persistent-bar')) {
    //Persistent bar in the top
    fromTop = parseInt(window.scrollY + 70, 10) * 100;
  }

  //Sorted array of positions
  var positions = [{
    name: 'top',
    depth: 30
  }, {
    name: 'middle',
    depth: 70
  }, {
    name: 'bottom',
    depth: 100
  }];
  var maxHeight = Math.max(document.body.clientHeight, window.outerHeight);
  if (maxHeight <= 0) {
    return '';
  }
  var scrollDepth = fromTop / maxHeight;
  for (var i = 0; i < positions.length; i++) {
    if (scrollDepth < positions[i].depth) {
      return positions[i].name;
    }
  }
  if (typeof target.parentNode.parentNode.className === 'string' && typeof target.parentNode.parentNode.className.includes !== 'undefined' && target.parentNode.parentNode.className.indexOf('sc-hdr__search') !== -1) {
    return 'top';
  }
  return 'bottom';
};
exports.calcElementLocation = calcElementLocation;
var getCurrentEnvironment = function getCurrentEnvironment() {
  var urlObj = window.scCommonConstants.URL_OBJ;
  var domain = getPageUrl().domain;
  if (domain.indexOf(urlObj[3] + '.' + urlObj[4]) !== -1) {
    if (domain === urlObj[0] + '.' + urlObj[3] + '.' + urlObj[4]) {
      return window.scCommonConstants.DEVELOPMENT;
    } else if (domain === urlObj[12] + '.' + urlObj[3] + '.' + urlObj[4]) {
      return window.scCommonConstants.STAGING;
    } else if (domain === urlObj[13] + '.' + urlObj[3] + '.' + urlObj[4]) {
      return window.scCommonConstants.PREVIEW;
    } else {
      return window.scCommonConstants.PRODUCTION;
    }
  } else if (domain === urlObj[1] + '.' + urlObj[2] + '.' + urlObj[4]) {
    if (getPageUrl().pathname.match('^/staging')) {
      return window.scCommonConstants.STAGING;
    } else if (getPageUrl().pathname.match('^/development')) {
      return window.scCommonConstants.DEVELOPMENT;
    } else {
      return window.scCommonConstants.PREVIEW;
    }
  } else {
    return window.scCommonConstants.DEVELOPMENT;
  }
};
exports.getCurrentEnvironment = getCurrentEnvironment;
var getPageUrl = function getPageUrl() {
  return getPageContext();
};

/**
 * get internal and external campaign info
 * @example
 * getIntExtCampaignInfo('in')
 */
exports.getPageUrl = getPageUrl;
var getIntExtCampaignInfo = function getIntExtCampaignInfo(country) {
  var allowableQueryString = window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb;
  if (country == 'in' || country == 'pk' || country == 'hk') {
    //Special whitelisted parameters
    allowableQueryString = ['aggregator_code', 'aggregator_type', 'aggregator_instance', 'intcid', 'subChanCode', 'referId', 'instance', 'camp_id', 'pid', 'promoCode', 'promo', 'state'];
  }
  var externalCampaignParams = ['cid']; //external campaign parameter(s) for HK
  var total = allowableQueryString.length;
  var intCampaignName = '';
  var intCampaignValue = '';
  var queryStringList = [];
  var queryString = window.location.search;
  var extCampaignName = '';
  var extCampaignValue = '';
  if (queryString) {
    queryString = queryString.substring(1);
    if (queryString) {
      queryStringList = queryString.split('&');
    }
  }
  //Take it from local storage
  var foundParam = false;
  for (var i = 0; i < total; i++) {
    var cookieValue = getCookie(allowableQueryString[i]);
    var localStorageValue = getLocalStorageWithExpiry(allowableQueryString[i]);
    if (cookieValue || localStorageValue) {
      foundParam = true;
      if (intCampaignName && intCampaignValue) {
        intCampaignName += ':';
        intCampaignValue += ':';
      }
      intCampaignName += allowableQueryString[i];
      intCampaignValue += cookieValue || localStorageValue;
    } else {
      if (intCampaignName) {
        intCampaignName += ':';
        intCampaignValue += ':';
      }
      intCampaignName += allowableQueryString[i];
      if (queryStringList.length) {
        var found = false;
        var result = void 0;
        for (var j = 0; j < queryStringList.length; j++) {
          result = queryStringList[j].split('=');
          if (result[0].toLowerCase() == allowableQueryString[i]) {
            found = true;
            break;
          }
        }
        if (found) {
          foundParam = true;
          intCampaignValue += result[1];
        } else {
          intCampaignValue += 'na';
        }
      } else {
        intCampaignValue += 'na';
      }
    }
  }

  //External campaign
  if (queryStringList.length) {
    for (var _i = 0; _i < queryStringList.length; _i++) {
      var _result = queryStringList[_i].split('=');
      if (allowableQueryString.indexOf(_result[0]) === -1) {
        //exclude whitelisted parameters from external campaign
        if (country !== 'hk' || externalCampaignParams.indexOf(_result[0]) !== -1) {
          if (extCampaignValue != '') {
            extCampaignName += ':';
            extCampaignValue += ':';
          }
          extCampaignName += _result[0];
          extCampaignValue += _result[1];
        }
      }
    }
  }
  if (!foundParam && (country == 'in' || country == 'hk')) {
    intCampaignName = '';
    intCampaignValue = '';
  } else {
    intCampaignName = intCampaignName.toLowerCase();
    intCampaignValue = intCampaignValue.toLowerCase();
  }
  if (!extCampaignName) {
    extCampaignName = extCampaignName.toLowerCase();
    extCampaignValue = extCampaignValue.toLowerCase();
  }
  return {
    intName: intCampaignName,
    intVal: intCampaignValue,
    extName: extCampaignName,
    extVal: extCampaignValue
  };
};

/**
 * return absolute position of selected div in px
 * @param {String} element class elements name as an object
 * @return {Number} return horizontal position in px
 * @example
 * getPosition('.selector')
 */
exports.getIntExtCampaignInfo = getIntExtCampaignInfo;
var getPosition = function getPosition(element) {
  if (!element) return '';
  var yPosition = 0;
  while (element) {
    yPosition += element.offsetTop - element.scrollTop + element.clientTop;
    element = element.offsetParent;
  }
  return yPosition;
};

/**
 * Function to detect the user's operating system
 */
exports.getPosition = getPosition;
var detectOS = function detectOS() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;

  // iOS detection
  if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
    return 'iOS';
  }

  // Android detection
  if (/android/i.test(userAgent)) {
    return 'Android';
  }
  return 'Unknown';
};

/**
 * check class name and return link type
 * @param {String} className class name of the clicked element
 * @return {String} return link type like link, button, carousel etc
 * @example
 * getCtaType('sc-btn')
 */
// CTA Type
exports.detectOS = detectOS;
var getCtaType = function getCtaType(className, target) {
  var mktCountryCode = getCurrentCountry();
  if (mktCountryCode === 'hk' || mktCountryCode === 'sg') {
    if (target) {
      if (target.closest('.sc-meganav__hamburger, .sc-meganav__close-button, .sc-meganav__login-btn, .sc-meganav__login-close, .c-button, .sc-btn')) {
        return 'button';
      }
      if (target.closest('.sc-meganav__btn-search-mbl')) {
        return 'search';
      }
      if (target.closest('header')) {
        return 'nav-link';
      }
      if (target.closest('.sc-recommend .sc-filter__btn, .sc-digital-guide__tab-item, .sc-tab-minimal__head-button, .sc-right-tab .splide__slide, .sc-tab__item')) {
        return 'tab';
      }
      if (target.closest('.sc-accordion__label, .sc-faq-two-column__label, .sc-faq__accordion-label, .c-plus-minus-accordion___item') && !target.closest('a')) {
        return 'accordion';
      }
      if (target.closest('.sc-quick-tools, .m-quick-links')) {
        return 'quick-links';
      }
    }
    return 'link';
  } else {
    if (target && target.closest('header')) {
      return 'nav-link';
    } else if (target && target.closest('.sc-banner__content')) {
      return 'masthead-button';
    } else if (target && target.closest('.sc-banner-slider__thumbnail')) {
      return 'button';
    } else if (target && target.closest('.sc-benefits-slider-tab__tabs-0')) {
      return 'button';
    } else if (target && target.closest('.sc-banner-przn-block')) {
      return 'widget-button';
    } else if (target && target.closest('.sc-filter__btn')) {
      return 'button';
    } else if (target && target.closest('.sc-quick-tools__links')) {
      return 'quick-link';
    } else if (target && target.closest('.sc-filter')) {
      return 'button';
    } else if (target && target.closest('.sc-digital-guide .splide')) {
      return 'button';
    } else if (target && target.closest('.sc-benefits-slider-tab__tab')) {
      return 'button';
    } else if (target && target.closest('.sc-footer')) {
      return 'footer-link';
    } else if (target && target.closest('.sc-persistent-bar')) {
      return 'persistent-bar-link';
    } else {
      return 'link';
    }
  }
};

/**
 * Track customer interaction for CTA Click.
 */
exports.getCtaType = getCtaType;
var handleAnalyticsCTA = function handleAnalyticsCTA(ev) {
  var targetClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var ctaObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (typeof launchscript === 'undefined' && !document.querySelector('#adobelaunchscript')) {
    //Adobe Analytics not enable for this market
    return;
  }
  var closest = targetClass ? targetClass : ev.target.closest('a');
  var ctaType = ctaObj.ctaType,
    ctaPosition = ctaObj.ctaPosition,
    xLinkRegion = ctaObj.xLinkRegion,
    customLinkText = ctaObj.customLinkText,
    linkName = ctaObj.linkName,
    context = ctaObj.context;
  var mktCountryCode = getCurrentCountry();
  if (!ctaType) {
    ctaType = closest ? getCtaType(closest.className, ev.target) : 'link';
  }
  if (!ctaPosition) {
    ctaPosition = calcElementLocation(ev.target);
  }
  if (!xLinkRegion) {
    xLinkRegion = getHorizontalPosition(ev.clientX);
  }
  if (!customLinkText && closest) {
    var _ref7, _ref8, _closest$getAttribute;
    customLinkText = (_ref7 = (_ref8 = (_closest$getAttribute = closest.getAttribute('title')) !== null && _closest$getAttribute !== void 0 ? _closest$getAttribute : closest.innerText) !== null && _ref8 !== void 0 ? _ref8 : closest.textContent) === null || _ref7 === void 0 ? void 0 : _ref7.trim().toLowerCase();
  }
  if (!linkName) {
    linkName = document.querySelector('title') && document.querySelector('title').innerText ? document.querySelector('title').innerText.toLowerCase() : 'na';
  }
  if (!context) {
    context = getCtaContext(closest);
  }
  var customLinkRegion = xLinkRegion + ' ' + ctaPosition;
  var updatedCtaPosition = ctaPosition;
  if (mktCountryCode === 'sg') {
    updatedCtaPosition = customLinkRegion;
  }
  if (typeof eddlEnabled === 'undefined') {
    //This code is added for the HK market because full EDDL is not implemented in HK market
    digitalData.ctaName = customLinkText;
    digitalData.ctaPosition = ctaPosition;
    if (typeof _satellite !== 'undefined' && typeof _satellite.track === 'function') {
      _satellite.track('callToAction');
    }
    return;
  }
  var titleSelector = document.querySelector('title');
  var ctaName = titleSelector && titleSelector.innerText ? titleSelector.innerText.toLowerCase() : 'na';
  var dataObject;
  if (mktCountryCode === 'sg') {
    dataObject = _objectSpread(_objectSpread({}, digitalData), {}, {
      customLinkClick: {
        customLinkText: typeof nitroEnabled !== 'undefined' ? context : customLinkText || ctaName,
        customLinkPosition: customLinkRegion,
        customLinkType: ctaType
      },
      event: 'ctaClick',
      href: window.location.href,
      context: context
    });
  } else if (mktCountryCode === 'hk') {
    dataObject = _objectSpread(_objectSpread({}, digitalData), {}, {
      event: 'ctaClick',
      title: customLinkText,
      href: window.location.href,
      context: context
    });
    dataObject.ctaName = typeof nitroEnabled !== 'undefined' ? context : customLinkText || ctaName;
    dataObject.ctaPosition = customLinkRegion;
    dataObject.ctaType = ctaType;
  } else {
    dataObject = _objectSpread(_objectSpread({}, digitalData), {}, {
      customLinkClick: {
        customLinkText: typeof nitroEnabled !== 'undefined' ? context : customLinkText,
        customLinkRegion: customLinkRegion,
        customLinkType: ctaType,
        customLinkName: linkName
      },
      event: 'ctaClick',
      title: customLinkText,
      href: window.location.href,
      context: context
    });
    dataObject.ctaName = typeof nitroEnabled !== 'undefined' ? context : customLinkText || ctaName;
    dataObject.ctaPosition = updatedCtaPosition;
    dataObject.ctaType = ctaType;
  }
  scAnalyticsDataArray.push(dataObject);
};

/**
 * Calculate range values based on original PI value.
 */
exports.handleAnalyticsCTA = handleAnalyticsCTA;
var calculateRanges = function calculateRanges(fieldNameValue, currentValue) {
  var newRanges = {
    monthlyIncome: [{
      start: 0,
      end: 10000
    }, {
      start: 10000,
      end: 20000
    }, {
      start: 20000,
      end: 30000
    }, {
      start: 30000,
      end: 40000
    }, {
      start: 40000,
      end: 50000
    }, {
      start: 50000,
      end: 60000
    }, {
      start: 60000,
      end: 70000
    }, {
      start: 70000,
      end: 80000
    }, {
      start: 80000,
      end: 90000
    }, {
      start: 90000,
      end: 100000
    }, {
      start: 100000,
      end: 110000
    }, {
      start: 110000,
      end: 120000
    }, {
      start: 120000
    }],
    loanAmount: [{
      start: 0,
      end: 100000
    }, {
      start: 100000,
      end: 200000
    }, {
      start: 200000,
      end: 300000
    }, {
      start: 300000,
      end: 400000
    }, {
      start: 400000,
      end: 500000
    }, {
      start: 500000,
      end: 600000
    }, {
      start: 600000,
      end: 700000
    }, {
      start: 700000,
      end: 800000
    }, {
      start: 800000,
      end: 900000
    }, {
      start: 900000,
      end: 1000000
    }, {
      start: 1000000
    }],
    repaymentAmount: [{
      start: 0,
      end: 20000
    }, {
      start: 20000,
      end: 50000
    }, {
      start: 50000,
      end: 100000
    }, {
      start: 100000,
      end: 150000
    }, {
      start: 150000,
      end: 200000
    }, {
      start: 200000,
      end: 250000
    }, {
      start: 250000,
      end: 300000
    }, {
      start: 300000,
      end: 350000
    }, {
      start: 350000
    }],
    dailyBalance: [{
      start: 0,
      end: 2000
    }, {
      start: 2000,
      end: 5000
    }, {
      start: 5000,
      end: 10000
    }, {
      start: 10000,
      end: 15000
    }, {
      start: 15000,
      end: 20000
    }, {
      start: 20000,
      end: 25000
    }, {
      start: 25000,
      end: 30000
    }, {
      start: 30000,
      end: 35000
    }, {
      start: 35000,
      end: 50000
    }, {
      start: 50000,
      end: 100000
    }, {
      start: 100000,
      end: 200000
    }, {
      start: 200000,
      end: 300000
    }, {
      start: 3000000,
      end: 500000
    }, {
      start: 500000,
      end: 750000
    }, {
      start: 750000,
      end: 1000000
    }, {
      start: 1000000
    }],
    apr: [{
      start: 0,
      end: 2
    }, {
      start: 2,
      end: 5
    }, {
      start: 5,
      end: 7
    }, {
      start: 7,
      end: 10
    }, {
      start: 10,
      end: 15
    }, {
      start: 15,
      end: 20
    }, {
      start: 20,
      end: 25
    }, {
      start: 25
    }],
    annualIncome: [{
      start: 0,
      end: 120000
    }, {
      start: 120000,
      end: 240000
    }, {
      start: 240000,
      end: 360000
    }, {
      start: 360000,
      end: 480000
    }, {
      start: 480000,
      end: 600000
    }, {
      start: 600000,
      end: 720000
    }, {
      start: 720000,
      end: 840000
    }, {
      start: 840000,
      end: 960000
    }, {
      start: 960000,
      end: 1080000
    }, {
      start: 1080000,
      end: 1200000
    }, {
      start: 1200000,
      end: 1320000
    }, {
      start: 1320000,
      end: 1440000
    }, {
      start: 1440000
    }],
    age: [{
      start: 0,
      end: 18
    }, {
      start: 18,
      end: 25
    }, {
      start: 25,
      end: 35
    }, {
      start: 35,
      end: 45
    }, {
      start: 45,
      end: 55
    }, {
      start: 55,
      end: 65
    }, {
      start: 65,
      end: 75
    }, {
      start: 75
    }],
    transactionAmount: [{
      start: 0,
      end: 100000
    }, {
      start: 100000,
      end: 200000
    }, {
      start: 200000,
      end: 300000
    }, {
      start: 300000,
      end: 400000
    }, {
      start: 400000,
      end: 500000
    }, {
      start: 500000,
      end: 600000
    }, {
      start: 600000,
      end: 700000
    }, {
      start: 700000,
      end: 800000
    }, {
      start: 800000,
      end: 900000
    }, {
      start: 900000,
      end: 1000000
    }, {
      start: 1000000,
      end: 1500000
    }, {
      start: 1500000,
      end: 2000000
    }, {
      start: 2000000,
      end: 3000000
    }, {
      start: 3000000
    }],
    totalSpend: [{
      start: 0,
      end: 1000
    }, {
      start: 1000,
      end: 2000
    }, {
      start: 2000,
      end: 3000
    }, {
      start: 3000,
      end: 4000
    }, {
      start: 4000,
      end: 5000
    }, {
      start: 5000,
      end: 6000
    }, {
      start: 6000,
      end: 7000
    }, {
      start: 7000,
      end: 8000
    }, {
      start: 8000,
      end: 9000
    }, {
      start: 9000,
      end: 10000
    }, {
      start: 10000
    }]
  };
  var calculatedRange = currentValue;
  if (!calculatedRange) {
    calculatedRange = 'na';
  } else {
    var val = parseInt(calculatedRange.toString().replace(/,/g, ''), 10);
    for (var i = 0; i < newRanges[fieldNameValue].length; i++) {
      var startVal = newRanges[fieldNameValue][i].start;
      var endVal = newRanges[fieldNameValue][i].end;
      if (val >= startVal && (endVal ? val < endVal : true)) {
        if (fieldNameValue === 'monthlyIncome') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : 'ge120k';
          break;
        } else if (fieldNameValue === 'loanAmount') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt' + (endVal == 1000000 ? '1m' : (Math.abs(endVal) / 1000).toFixed() + 'k') : 'ge1m';
          break;
        } else if (fieldNameValue === 'transactionAmount') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (startVal >= 1000000 ? Math.abs(startVal) / 1000000 + 'm-lt' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt') + (endVal >= 1000000 ? Math.abs(endVal) / 1000000 + 'm' : (Math.abs(endVal) / 1000).toFixed() + 'k') : 'ge3m';
          break;
        } else if (fieldNameValue === 'annualIncome') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (startVal >= 1000000 ? Math.abs(startVal) / 1000000 + 'm-lt' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt') + (endVal >= 1000000 ? Math.abs(endVal) / 1000000 + 'm' : (Math.abs(endVal) / 1000).toFixed() + 'k') : 'ge1.44m';
          break;
        } else if (fieldNameValue === 'repaymentAmount') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : 'ge350k';
          break;
        } else if (fieldNameValue === 'dailyBalance') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : 'ge1m';
          break;
        } else if (fieldNameValue === 'apr') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + endVal : startVal + '%-lt' + endVal + '%' : 'ge25%';
          break;
        } else if (fieldNameValue === 'age') {
          calculatedRange = endVal ? startVal + '-lt' + endVal : 'ge75';
          break;
        } else if (fieldNameValue === 'totalSpend') {
          calculatedRange = endVal ? startVal == 0 ? startVal + '-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : (Math.abs(startVal) / 1000).toFixed() + 'k-lt' + (Math.abs(endVal) / 1000).toFixed() + 'k' : 'ge10k';
          break;
        }
      }
    }
  }
  return calculatedRange;
};

/**
 * Track customer interaction with calculators.
 */
exports.calculateRanges = calculateRanges;
var handleCalculatorAnalytics = function handleCalculatorAnalytics(calculatorName, fields) {
  if (typeof launchscript === 'undefined' && !document.querySelector('#adobelaunchscript')) {
    //Adobe Analytics not enable for this market
    return;
  }
  var dataObject = _objectSpread(_objectSpread({}, digitalData), {}, {
    calculator: {
      name: calculatorName,
      fields: fields
    },
    user: {
      userInfo: {
        userStatus: 'guest',
        userType: 'NTB'
      }
    },
    event: 'calculatorSubmit',
    title: document.title,
    href: window.location.href
  });
  scAnalyticsDataArray.push(dataObject);
};

/**
 * delay 1 second when once moved the slider bar and trigger events
 * @example
 * debounceEvents()
 */
exports.handleCalculatorAnalytics = handleCalculatorAnalytics;
var debounceEvents = function debounceEvents(f, delay) {
  var timer = null;
  return function () {
    var context = this,
      args = arguments;
    clearTimeout(timer);
    timer = window.setTimeout(function () {
      f.apply(context, args);
    }, delay || 500);
  };
};

/**
 * Check if a given URL is a form URL.
 *
 * @param string url The URL.
 *
 * @return bool True if it's form URL, false otherwise.
 */
exports.debounceEvents = debounceEvents;
var isForm = function isForm(url) {
  if (window.scCommonConstants.ALLOWABLE_QUERYSTRING['form-urls'] != '' && window.scCommonConstants.ALLOWABLE_QUERYSTRING['form-urls'] != undefined) {
    var formRegex = new RegExp(window.scCommonConstants.ALLOWABLE_QUERYSTRING['form-urls'], 'gi');
    return formRegex.test(url);
  }
  return false;
};

/**
 * Check if tracking parameters should be carried forward to the given URL.
 *
 * @param string url The URL.
 *
 * @return bool True if parameters should be carried forward. False otherwise.
 */
exports.isForm = isForm;
var shouldCarryTrackingParams = function shouldCarryTrackingParams(url) {
  if (isForm(url)) {
    return true;
  }
  var paramList = ['https://www.royalsundaram.in', 'https://www.maxbupa.com', 'https://www.bharti-axagi.co.in', 'https://www.iciciprulife.com', 'https://www.einsure.allianz.com.sg', 'https://www.allianz-travel-insure.com.sg', 'https://www.lin.ee', 'https://www.piapp.com', 'https://go.fpg.sg', 'https://fairprice.com.sg', 'scmobile://communication-hub'];
  var partnerRegex = [];
  if (paramList && paramList.length > 0) {
    for (var j = 0; j < paramList.length; j++) {
      partnerRegex[j] = new RegExp(paramList[j], 'gi');
    }
  }
  for (var i = 0; i < partnerRegex.length; i++) {
    if (partnerRegex[i].test(url)) {
      return true;
    }
  }
  return false;
};

/**
 * Apply cookie param to given url
 * @param URL of the current page
 * @param target URL
 * @param targetUrlParamsToTakePrecedence Based on this value target url params will be updated.
 */
exports.shouldCarryTrackingParams = shouldCarryTrackingParams;
var applyCookieParams = function applyCookieParams($url) {
  var $swapping_attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var targetUrlParamsToTakePrecedence = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var queryString = '';
  var queryParts = [];
  var pageQueryString = '';
  var urlQueryString = '';
  var pageUrl = getPageUrl();
  var allowableQueryString = window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb;
  var allowableQueryStringOthers = window.scCommonConstants.ALLOWABLE_QUERYSTRING.others;
  var swap_map = {};
  if ($swapping_attrs !== '') {
    var $swappingList = $swapping_attrs.split('|');
    $swappingList.forEach(function (attr) {
      attr = attr.split('=');
      swap_map[attr[0]] = attr[1];
    });
  }
  if (pageUrl.queryString) {
    pageQueryString = pageUrl.queryString;
    if (pageQueryString.indexOf('&') !== -1) {
      queryParts = pageQueryString.split('&');
    } else {
      queryParts.push(pageQueryString);
    }
  }

  // Get query parameters from target URL
  var urlParts = [];
  var urlBreakdownData = urlBreakdown($url);
  if (urlBreakdownData.queryString) {
    urlQueryString = urlBreakdownData.queryString;
    if (urlQueryString.indexOf('&') !== -1) {
      urlParts = urlQueryString.split('&');
    } else {
      urlParts.push(urlQueryString);
    }
  }

  // Get query parameters from Cookie
  var cookieParts = [];
  if (allowableQueryString.length > 0) {
    for (var i = 0; i < allowableQueryString.length; i++) {
      var query = getLocalStorageWithExpiry(allowableQueryString[i]);
      if (query !== null) {
        var allowableQueryStringKey = swap_map[allowableQueryString[i]] ? swap_map[allowableQueryString[i]] : allowableQueryString[i];
        cookieParts.push(allowableQueryStringKey + '=' + encodeURI(query));
      }
    }
  }
  var qsArr = [];
  // User parameter from Page URL
  for (var j = 0; j < queryParts.length; j++) {
    if (queryParts[j] !== '') {
      var ur = queryParts[j].split('=');

      // Allow only whitelisted params from pageUrl.
      if (!allowableQueryStringOthers.includes(ur[0])) {
        continue;
      }

      // If targetUrlParamsToTakePrecedence is true and urlQueryString has the same parameter, then skip from updating the value.
      if (targetUrlParamsToTakePrecedence && urlQueryString.indexOf(ur[0] + '=') !== -1) {
        continue;
      }
      if (qsArr.indexOf(ur[0].toLowerCase()) === -1) {
        if (queryString !== '') {
          queryString += '&';
        }
        var uu = getUrlParamName(ur[0]);
        queryString += uu + '=' + ur[1];
        qsArr.push(ur[0].toLowerCase());
      }
    }
  }

  // User parameter from Cookie only if that parameter does not exist in URL
  for (var l = 0; l < cookieParts.length; l++) {
    if (cookieParts[l] !== '') {
      var co = cookieParts[l].split('=');

      // If targetUrlParamsToTakePrecedence is true and urlQueryString has the same parameter, then skip from updating the value.
      if (targetUrlParamsToTakePrecedence && urlQueryString.indexOf(co[0] + '=') !== -1) {
        continue;
      }
      if (qsArr.indexOf(co[0].toLowerCase()) === -1) {
        if (queryString !== '') {
          queryString += '&';
        }
        var cc = getUrlParamName(co[0]);
        queryString += cc + '=' + co[1];
        qsArr.push(co[0].toLowerCase());
      }
    }
  }

  // Use parameter from target url only if it does not exist in page URL and cookie
  for (var k = 0; k < urlParts.length; k++) {
    if (urlParts[k] !== '') {
      var qs = urlParts[k].split('=');
      if (qsArr.indexOf(qs[0].toLowerCase()) === -1) {
        if (queryString !== '') {
          queryString += '&';
        }
        var qq = getUrlParamName(qs[0]);
        queryString += qq + '=' + qs[1];
      }
    }
  }
  var breakdown = parseUrl($url);
  var queryStringArray = queryString.split('&');
  if (queryString !== '' && queryStringArray.length > 0) {
    queryStringArray.forEach(function (value) {
      breakdown.rawpath = breakdown.rawpath.replace('&' + value, '');
    });
  }
  if (breakdown.protocal === 'mailto:') {
    return "".concat(breakdown.protocal).concat(breakdown.hostname).concat(breakdown.pathname, "?").concat(queryString).concat(breakdown.hash);
  } else {
    if ($swapping_attrs !== '' && $swapping_attrs.indexOf(',') !== -1) {
      queryString = bundleParam(queryString, $swapping_attrs);
    }
    if (breakdown.hash.indexOf('?') !== -1) {
      return "".concat(breakdown.protocal, "//").concat(breakdown.hostname).concat(breakdown.rawpath, "?").concat(queryString).concat(breakdown.hash);
    }
    return "".concat(breakdown.protocal, "//").concat(breakdown.hostname).concat(breakdown.pathname, "?").concat(queryString).concat(breakdown.hash);
  }
};
exports.applyCookieParams = applyCookieParams;
var getUrlParamName = function getUrlParamName(paramName) {
  var index = -1;
  for (var i = 0; i < window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb.length; i++) {
    if (paramName.toLowerCase() === window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb[i].toLowerCase()) {
      index = i;
      break;
    }
  }
  if (index >= 0) {
    return window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb[index];
  }
  return paramName;
};

/**
 * bundleParam method used for Params Bundling.
 * If bundle parameters are available then it's replaced by value which are present in the queryString and append it inside the current CTA
 * @param queryString generated new queryString based on data-pass-params & data-cta-url-params-precedence
 * @param $swapping_attrs attributes of swap-attrs
 * bundleParam('#/onboarding?country=SG&products=162,338&campaign=6203,CA001', 'subChanCode,referId=aggregator')
 */
exports.getUrlParamName = getUrlParamName;
var bundleParam = function bundleParam(queryString, $swapping_attrs) {
  var swap_map = {};
  var urlQueryString = window.location.search;
  if (!urlQueryString) return queryString;
  urlQueryString = urlQueryString.substr(1);
  if (!urlQueryString) return queryString;
  urlQueryString = urlQueryString.split('&');
  var allowableQueryString = window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb;
  $swapping_attrs = $swapping_attrs.split('=');
  swap_map = $swapping_attrs[0].split(',');
  var swap_str = '';
  for (var i = 0; i < swap_map.length; i++) {
    if (allowableQueryString.includes(swap_map[i])) {
      for (var j = 0; j < urlQueryString.length; j++) {
        var list = urlQueryString[j].split('=');
        if (list[0] === swap_map[i]) {
          swap_str += swap_str ? ',' : '';
          swap_str += list[1];
        }
      }
    }
  }
  if (!swap_str) return queryString;
  if (queryString.indexOf($swapping_attrs[1]) === -1) {
    queryString += '&' + $swapping_attrs[1] + "=".concat(swap_str);
  } else {
    var strList = queryString.split('&');
    queryString = '';
    for (var _i2 = 0; _i2 < strList.length; _i2++) {
      var _list = strList[_i2].split('=');
      queryString += queryString ? '&' : '';
      if (_list[0] === $swapping_attrs[1]) {
        queryString += $swapping_attrs[1] + "=".concat(swap_str);
      } else {
        queryString += _list[0] + '=' + _list[1];
      }
    }
  }
  return queryString;
};
exports.bundleParam = bundleParam;
var isEmpty = function isEmpty(obj) {
  // null and undefined are "empty"
  if (obj == null) return true;

  // Assume if it has a length property with a non-zero value
  // that that property is correct.
  if (obj.length > 0) return false;
  if (obj.length === 0) return true;

  // If it isn't an object at this point
  // it is empty, but it can't be anything *but* empty
  // Is it empty?  Depends on your application.
  if (_typeof(obj) !== 'object') return true;

  // Otherwise, does it have any properties of its own?
  // Note that this doesn't handle
  // toString and valueOf enumeration bugs in IE < 9
  for (var key in obj) {
    if (hasOwnProperty.call(obj, key)) return false;
  }
  return true;
};
exports.isEmpty = isEmpty;
var convertQueryStringToJsonObject = function convertQueryStringToJsonObject(queryString) {
  var queries = queryString.split('&');
  var json = {};
  for (var i = 0; i < queries.length; i++) {
    var keyValue = queries[i].split('=');
    if (keyValue.length === 2) {
      json[keyValue[0].toLowerCase()] = keyValue[1];
    }
  }
  return json;
};

/**
 * Method to set localStorage with expiry date.
 * @param {string} key LocalStorage key
 * @param {string} value LocalStorage value
 * @param {number} ttl Expiry date
 */
exports.convertQueryStringToJsonObject = convertQueryStringToJsonObject;
var setLocalStorageWithExpiry = function setLocalStorageWithExpiry(key, value, ttl) {
  var now = new Date();

  // `item` is an object which contains the original value.
  // as well as the time when it's supposed to expire
  var item = {
    value: value,
    expiry: now.getTime() + ttl
  };
  localStorage.setItem(key, JSON.stringify(item));
};

/**
 * This clunky regex is taken directly from http://detectmobilebrowsers.com/
 */
exports.setLocalStorageWithExpiry = setLocalStorageWithExpiry;
var isMobile = function isMobile() {
  var stringCheck = navigator.userAgent || navigator.vendor || window.opera;
  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(stringCheck) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(stringCheck.substr(0, 4));
};

/**
 * added comma after each three digits like 1,000,000
 * @example
 * @param {numbers} 10000
 *convertNumbers(10000)
 */
exports.isMobile = isMobile;
var convertNumbers = function convertNumbers(selector, numbers) {
  if (numbers === '' || !numbers) return 0;
  var returnVal = numbers.toString();
  var tmp = [];
  var fraction = 0;
  if (Number(selector.getAttribute('data-comma-format')) === 2) {
    if (returnVal.indexOf('.') !== -1) {
      var splitValue = returnVal.split('.');
      tmp = splitValue[0].split('').reverse(); //4321
      fraction = parseInt(splitValue[1], 10);
    } else {
      tmp = returnVal.split('').reverse(); //4321
    }

    var strNew = '';
    if (tmp.length > 3) {
      //true
      var lastThree = tmp.splice(0, 3);
      for (var i = 0; i < tmp.length; i++) {
        if (i > 0 && i % 2 == 0) {
          strNew += ',';
        }
        strNew += tmp[i].toString();
      }
      strNew = lastThree.join('') + ',' + strNew;
      strNew = strNew.split('').reverse().join('');
    }
    if (strNew) {
      if (fraction) {
        strNew = '' + strNew + ".".concat(fraction);
      }
      if (strNew.slice(0, 2) == '-,') {
        strNew = strNew.replace(/-,/gi, '-');
      }
      return strNew;
    } else {
      return returnVal;
    }
  } else {
    if (returnVal.indexOf('.') !== -1) {
      var _splitValue = returnVal.split('.');
      tmp = _splitValue[0].split('').reverse(); //4321
      fraction = _splitValue[1];
    } else {
      tmp = returnVal.split('').reverse(); //4321
    }

    var _strNew = '';
    if (tmp.length > 3) {
      //true if it's more than or equal thousands
      for (var _i3 = 0; _i3 < tmp.length; _i3++) {
        if (_i3 > 0 && _i3 % 3 == 0) {
          _strNew += ',';
        }
        _strNew += tmp[_i3].toString();
      }
      _strNew = _strNew.split('').reverse().join('');
    }
    if (_strNew) {
      if (fraction) {
        _strNew = '' + _strNew + ".".concat(fraction);
      }
      return _strNew;
    } else {
      return returnVal;
    }
  }
};
exports.convertNumbers = convertNumbers;
var handleProductCalculatorSubmit = function handleProductCalculatorSubmit(calculatorName, fields) {
  if (typeof digitalData === 'undefined') {
    return; // Exit the function early if digitalData is not defined
  }

  digitalData.calculator = {
    name: calculatorName,
    fields: fields
  };
  if (typeof _satellite !== 'undefined' && typeof _satellite.track === 'function') {
    _satellite.track('calculatorSubmit');
  }

  //update adobeDataLayer with calculator submit event
  if (typeof window.adobeDataLayer !== 'undefined') {
    var dataObject = _objectSpread(_objectSpread({}, digitalData), {}, {
      event: 'calculatorSubmit'
    });

    //change calculator payload key names for adobeDataLayer object
    var newFields = [];
    var obj = {};
    fields.forEach(function (el) {
      obj = _objectSpread({}, el);
      obj.formFieldName = obj.fieldName;
      delete obj.fieldName;
      obj.formFieldValue = obj.fieldValue;
      delete obj.fieldValue;
      newFields.push(obj);
    });
    var calculator = {
      name: calculatorName,
      fields: newFields
    };
    delete dataObject.calculator;
    dataObject.calculator = calculator;
    window.adobeDataLayer.push(dataObject);
  }
};

/**
 * initialized or update slider based on the sliderInit value
 */
exports.handleProductCalculatorSubmit = handleProductCalculatorSubmit;
var initializeSlider = function initializeSlider(mainSelector, parentSelector) {
  var docElement = document.documentElement;
  var direction = docElement.getAttribute('dir') ? docElement.getAttribute('dir') : null;
  var allSlider = mainSelector.querySelectorAll('.sc-range-slider');
  if (allSlider.length) {
    //Initialize slider
    allSlider.forEach(function (slider) {
      noUiSlider.create(slider, {
        start: Number(slider.getAttribute('data-default')),
        step: Number(slider.getAttribute('data-step')),
        behaviour: 'snap',
        connect: 'lower',
        range: {
          min: Number(slider.getAttribute('data-min')),
          max: Number(slider.getAttribute('data-max')) > 0 ? Number(slider.getAttribute('data-max')) : 10000000
        },
        direction: direction
      });
      var inputField = slider.closest(parentSelector).querySelector('input[class$="-value"]');
      if (inputField) {
        //Slider related with text field
        inputField.value = convertNumbers(mainSelector, slider.getAttribute('data-default'));
      } else {
        var dropdownField = slider.closest(parentSelector).querySelector('select[class$="-value"]');
        if (dropdownField) {
          //Slider related with dropdown field
          dropdownField.value = slider.getAttribute('data-default');
        }
      }
    });
    allSlider.forEach(function (el) {
      el.setAttribute('aria-label', 'Drage here to move slider');
    });
  }
};

/**
 * this method will be call when any key pressed in estimate daily field, pass value to calculateInterest method and return start status
 *
 * @param {Number} start get estimate daily balance number of click      *
 * @example
 * activeInputVal(1, 1200)
 */
exports.initializeSlider = initializeSlider;
var validateInput = function validateInput(selector, sliderClass, errorSelector) {
  var selectedClass = selector.querySelector(".".concat(sliderClass)),
    inputField = selector.querySelector(".".concat(sliderClass, "-value")),
    sliderExist = true,
    minValue,
    maxValue;
  if (inputField) {
    //slider input fields
    minValue = Number(selectedClass.getAttribute('data-min'));
    maxValue = Number(selectedClass.getAttribute('data-max'));
  } else {
    //non slider input fields
    minValue = Number(selectedClass.getAttribute('data-min'));
    maxValue = Number(selectedClass.getAttribute('data-max'));
    inputField = selectedClass;
    sliderExist = false;
  }
  var initValue = inputField.value,
    value = 0;
  errorSelector.classList.add('hide');
  if (!selectedClass.getAttribute('data-decimal')) {
    value = initValue.replace(/[^0-9]+/gi, '').replace(/^0/, ''); //remove all string except 0-9
    if (value != initValue) {
      inputField.value = value;
    }
    if (value) {
      value = parseInt(value, 10);
    }
  } else {
    //if text field supports fraction value
    value = initValue.replace(/[^0-9.]/gi, '').replace(/^0/, '');
    if (value != initValue) {
      inputField.value = value;
    }
    if (!value) {
      value = '';
    } else {
      var raVal = value.split('.');
      if (value === '.') {
        errorSelector.classList.remove('hide');
        return;
      } else if (raVal.length > 2) {
        //more than two floating point
        value = "".concat(raVal[0], ".").concat(raVal[1]);
        inputField.value = value;
        return;
      } else if (raVal[1] && raVal[1].length > 2) {
        value = "".concat(raVal[0], ".") + raVal[1].substr(0, 2);
        inputField.value = value;
        return;
      }
      if (value.slice(-1) === '.') {
        return;
      } else if (raVal[1] && raVal[1].length === 1) {
        value = parseFloat(value).toFixed(1);
      } else {
        value = Number(value);
      }
    }
  }
  if (value > maxValue) {
    //checking text field maximum value
    value = maxValue;
    if (sliderExist) selectedClass.noUiSlider.set([value]); //Push value in NoUiSlider
  } else if (value === '' && minValue > 0) {
    //leave text field as blank and fill it with 0
    value = '';
    errorSelector.classList.remove('hide');
  } else if (value < minValue) {
    errorSelector.classList.remove('hide');
  }
  if (sliderExist) {
    if (value !== '' && value >= minValue) {
      selectedClass.noUiSlider.set([value]); //Push value in NoUiSlider
    } else {
      selectedClass.noUiSlider.set([0]);
    }
  }
  inputField.value = value;
};

/**
 * calculate monthly repayment amount
 * @param {Number} interestRate - interest rate in Int
 * @param {Number} tenor - tenor in number months Int
 * @param {Number} loanAmount - loan amount in Int
 * @param {Number} advancedPayments - advanced payment amount in Int
 * @return {Number} return calculated PMT value
 * Example:
 * calculatePMT(16, 12, 1500000, 0)
 **/
exports.validateInput = validateInput;
var calculatePMT = function calculatePMT(interestRate, tenor, loanAmount) {
  var advancedPayments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var monthlyRate = interestRate / 1200;
  var t1 = 1 + monthlyRate;
  var t3 = Math.pow(t1, tenor - advancedPayments);
  return loanAmount * monthlyRate / (1 - 1 / t3);
};

/**
 * check error status of the slider input fields
 */
exports.calculatePMT = calculatePMT;
var sliderErrorStatus = function sliderErrorStatus(selector, fieldName) {
  var errorStatus = false;
  var allFields = selector.querySelectorAll(fieldName);
  if (allFields.length) {
    for (var i = 0; i < allFields.length; i++) {
      var value = Number(allFields[i].value.replace(/[^0-9.]/gi, ''));
      var className = allFields[i].className.split(' ');
      className = className[className.length - 1].slice(0, -6);
      var slider = selector.querySelector(".".concat(className)),
        minValue = Number(slider.getAttribute('data-min'));
      if (isNaN(value) || value < minValue) {
        errorStatus = errorStatus || true;
      }
    }
  }
  return errorStatus;
};

/**
 * add to digit after floating point
 */
exports.sliderErrorStatus = sliderErrorStatus;
var formatNumbersWithTwoDecimalPlaces = function formatNumbersWithTwoDecimalPlaces(inputString) {
  // Use a regular expression to find numbers (both integer and decimal)
  var regex = /(\d+(\.\d*)?)/g;

  // Replace each matched number with the number formatted to two decimal places
  var filteredResult = inputString.replace(regex, function (match) {
    var number = parseFloat(match);
    if (!isNaN(number)) {
      return number.toFixed(2);
    }
    return match; // If not a valid number, return the original match
  });

  var parts = filteredResult.split('.');
  var result = parseFloat(parts[0] + '.' + parts.slice(1).join('')).toFixed(2);
  return isNaN(result) ? '0.00' : result;
};

/**
 * VLOOKUP is a function in Microsoft Excel (and similar spreadsheet software) that stands for "Vertical Lookup." It is commonly used to search for a value in the first column of a table and return a value in the same row from another column.
 * @param {Number} lookupValue - Replace M14 with the actual value you want to look up
 * @param {Object} tableArray - Add more rows as needed
 * @param {Number} colIndex - Assuming you want to retrieve the value from the second column
 * Example:
 * vLookup(16, [[0, 100], [50, 85], [75, 75]], 2)
 **/
exports.formatNumbersWithTwoDecimalPlaces = formatNumbersWithTwoDecimalPlaces;
var vLookup = function vLookup(lookupValue, tableArray, colIndex) {
  for (var i = 0; i < tableArray.length; i++) {
    var row = tableArray[i];
    var compareValue = row[0]; // Assuming the lookup column is the first column in the tableArray

    if (compareValue <= lookupValue && (i === tableArray.length - 1 || tableArray[i + 1][0] > lookupValue)) {
      return row[colIndex - 1]; // Adjusting for 1-based indexing in Excel
    }
  }

  return undefined; // Return undefined if no match is found
};

/**
 * validate all slider field input
 */
exports.vLookup = vLookup;
var sliderFieldErrorStatus = function sliderFieldErrorStatus(selector, parentClass, errorClass) {
  var closest = selector.closest(parentClass),
    minValue = Number(closest.querySelector('.sc-range-slider').getAttribute('data-min')),
    errorSelector = closest.querySelector(errorClass),
    value = Number(selector.value.replace(/[^0-9]+/gi, ''));
  if (value >= minValue) {
    errorSelector.classList.add('hide');
    return true;
  }
  errorSelector.classList.remove('hide');
  return false;
};

/**
 * check step field error status
 */
exports.sliderFieldErrorStatus = sliderFieldErrorStatus;
var stepFieldErrorStatus = function stepFieldErrorStatus(selector, parentClass, errorClass) {
  var minValue = Number(selector.getAttribute('data-min')),
    errorSelector = selector.closest(parentClass).querySelector(errorClass),
    value = Number(selector.value.replace(/[^0-9]+/gi, ''));
  if (value >= minValue) {
    errorSelector.classList.add('hide');
    return true;
  }
  errorSelector.classList.remove('hide');
  return false;
};

/**
 * The FV function is a financial function that returns the future value of an investment
 * @param {*} rate step up rate
 * @param {*} nper time period
 * @param {*} pmt Since Excel formula has an empty field, we assume it's 0
 * @param {*} pv initial investment amount
 * @param {*} type The Excel formula specifies type as 0
 * @returns
 */
exports.stepFieldErrorStatus = stepFieldErrorStatus;
var calculateFutureValue = function calculateFutureValue(rate, nper, pmt, pv, type) {
  // Calculate the future value
  var roundedNper = Math.round(nper);
  var factor = Math.pow(1 + rate, roundedNper);
  var futureValue = pv * factor + pmt * (1 - factor) / rate;
  if (type === 0) {
    return futureValue;
  } else {
    // If type is not 0, adjust the result
    return futureValue * (1 + rate);
  }
};

/**
 * based on the input month, it's calculate number of year and month
 */
exports.calculateFutureValue = calculateFutureValue;
var convertMonthsToYearsAndMonths = function convertMonthsToYearsAndMonths(months) {
  var years = Math.floor(months / 12);
  var remainingMonths = months % 12;
  return {
    years: years,
    months: remainingMonths
  };
};

/**
 * calculate monthly repayment amount and it's for =PMT(D4/12,D6,0,-D3,0) formula
 * @param {Number} rate: interest rate for each period
 * @param {Number} nper: number of periods
 * @param {Number} pv: present value or principal amount
 * @param {Number} fv: future value or a cash balance after the last payment
 * @return {Number} type: 0 for payments at the end of the period, 1 for payments at the beginning
 * Example:
 * calculatePMT(10/12/100, 10, 0, -1200000, 0)
 **/
exports.convertMonthsToYearsAndMonths = convertMonthsToYearsAndMonths;
var extendedPMT = function extendedPMT(rate, nper, pv, fv, type) {
  if (rate === 0) {
    return -(pv + fv) / nper;
  }
  var pvif = Math.pow(1 + rate, nper);
  var pmt = rate * (fv + pvif * pv) / (pvif - 1);
  if (type === 1) {
    pmt /= 1 + rate;
  }
  return -pmt;
};

/**
 * The calculateNPER function is a financial function that returns the number of periods for loan or investment
 * rate - The interest rate per period.
 * payment - The payment made each period.
 * present - The present value, or total value of all payments now.
 * future - [optional] The future value, or a cash balance you want after the last payment is made. Defaults to 0.
 * type - [optional] When payments are due. 0 = end of period. 1 = beginning of period. Default is 0.
 */
exports.extendedPMT = extendedPMT;
var calculateNPER = function calculateNPER(rate, payment, present, future, type) {
  // Initialize type
  type = typeof type === 'undefined' ? 0 : type;

  // Initialize future value
  future = typeof future === 'undefined' ? 0 : future;

  // Return number of periods
  var num = payment * (1 + rate * type) - future * rate;
  var den = present * rate + payment * (1 + rate * type);
  return Math.log(num / den) / Math.log(1 + rate);
};

/**
 * Calculates the number of years and months from a given number of months.
 *
 * @param {number} numberOfMonths - The total number of months.
 * @returns {String} String with the calculated number of years and months.
 */
exports.calculateNPER = calculateNPER;
var calculateYearMonth = function calculateYearMonth(numberOfMonths) {
  var months = numberOfMonths % 12;
  var years = Math.floor(numberOfMonths / 12);
  if (years > 1) {
    years = "".concat(years, " Year(s)");
  } else if (years === 1) {
    years = "".concat(years, " Year");
  } else {
    years = '';
  }
  if (months > 1) {
    months = " ".concat(months, " Month(s)");
  } else if (months === 1) {
    months = " ".concat(months, " Month");
  } else {
    months = '';
  }
  return "".concat(years).concat(months);
};

/**
 * Calculates the Effective Interest Rate (EIR) or Internal Rate of Return (IRR)
 * using Newton's method.
 *
 * @param {number} periods - Number of compounding periods.
 * @param {number} payment - Periodic payment.
 * @param {number} present - Present value or initial investment.
 * @param {number} future - Future value or final investment.
 * @param {number} type - 0 for ordinary annuity, 1 for annuity due.
 * @param {number} [guess=0.01] - Initial guess for the interest rate. Defaults to 0.01.
 * @returns {number} - Calculated Effective Interest Rate.
 */
exports.calculateYearMonth = calculateYearMonth;
var calculateEIR = function calculateEIR(periods, payment, present, future, type, guess) {
  guess = guess === undefined ? 0.01 : guess;
  future = future === undefined ? 0 : future;
  type = type === undefined ? 0 : type;

  // Set maximum epsilon for end of iteration
  var epsMax = 1e-10;

  // Set maximum number of iterations
  var iterMax = 10;

  // Implement Newton's method
  var y,
    y0,
    y1,
    x0,
    x1 = 0,
    f = 0,
    i = 0;
  var rate = guess;
  if (Math.abs(rate) < epsMax) {
    y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;
  } else {
    f = Math.exp(periods * Math.log(1 + rate));
    y = present * f + payment * (1 / rate + type) * (f - 1) + future;
  }
  y0 = present + payment * periods + future;
  y1 = present * f + payment * (1 / rate + type) * (f - 1) + future;
  i = x0 = 0;
  x1 = rate;
  while (Math.abs(y0 - y1) > epsMax && i < iterMax) {
    rate = (y1 * x0 - y0 * x1) / (y1 - y0);
    x0 = x1;
    x1 = rate;
    if (Math.abs(rate) < epsMax) {
      y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;
    } else {
      f = Math.exp(periods * Math.log(1 + rate));
      y = present * f + payment * (1 / rate + type) * (f - 1) + future;
    }
    y0 = y1;
    y1 = y;
    ++i;
  }
  return rate;
};

/**
 * Calculating the Internal Rate of Return (IRR)
 * * @param {*} cashFlows is an array like [-200000.00, 0, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67, 4666.67] where -200000.00 is the input load amount and 4666.67 is the Monthly Repayment Amount
 */
exports.calculateEIR = calculateEIR;
var calculateIRR = function calculateIRR(cashFlows) {
  var iterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.00001;
  var irr = 0.1; // Initial guess for IRR
  var cashflowValue = 0;
  for (var i = 0; i < iterations; i++) {
    cashflowValue = 0;
    for (var j = 0; j < cashFlows.length; j++) {
      cashflowValue += cashFlows[j] / Math.pow(1 + irr, j);
    }
    var derivative = calculateDerivative(cashFlows, irr);
    irr = irr - cashflowValue / derivative;
    if (Math.abs(cashflowValue) < tolerance) {
      return irr;
    }
  }

  // If the iteration does not converge, return null or handle accordingly
  return null;
};

/**
 * Calculates the derivative of the NPV with respect to the IRR. The iteration continues until the NPV is close enough to zero or the maximum number of iterations is reached.
 */
exports.calculateIRR = calculateIRR;
var calculateDerivative = function calculateDerivative(cashFlows, irr) {
  var derivative = 0;
  for (var i = 0; i < cashFlows.length; i++) {
    derivative -= i * cashFlows[i] / Math.pow(1 + irr, i + 1);
  }
  return derivative;
};

/**
 * Calculates the present value of an investment (PV Method).
 * @param {number} ratePerPeriod - The interest rate per period.
 * @param {number} numberOfPeriods - The total number of periods.
 * @param {number} payment - The payment amount per period.
 * @returns {number} The present value of the investment.
 */
exports.calculateDerivative = calculateDerivative;
var calculatePresentValue = function calculatePresentValue(rate, nper, pmt) {
  return pmt * ((1 - Math.pow(1 + rate, -nper)) / rate);
};

/**
 * Calculates the monthly payment on a loan.
 *
 * @param {number} rate - The monthly interest rate (annual rate divided by 12).
 * @param {number} nper - The total number of payments (years multiplied by 12).
 * @param {number} pv - The present value or loan amount (should be negative as it's an outflow).
 * @returns {number} The monthly payment.
 */
exports.calculatePresentValue = calculatePresentValue;
var pmt = function pmt(rate, nper, pv) {
  if (rate === 0) return -pv / nper;
  var pvif = Math.pow(1 + rate, nper);
  return rate * pv * pvif / (pvif - 1);
};

/**
 * get current elements height including margin top and bottom
 * @param {Object} el - The elements which height need to be calculated
 * getOuterHeight(document.querySelector('#onetrust-banner-sdk'))
 **/
exports.pmt = pmt;
var getOuterHeight = function getOuterHeight(el) {
  if (!el) return 0;
  var elHeight = el.offsetHeight;
  elHeight += parseInt(window.getComputedStyle(el).getPropertyValue('margin-top'));
  elHeight += parseInt(window.getComputedStyle(el).getPropertyValue('margin-bottom'));
  return elHeight;
};

/**
 * MatchHeight function to make divs the same height. Use this function only when CSS flexbox is not possible.
 * @param {String} selector - Container class, id, or element.
 */
exports.getOuterHeight = getOuterHeight;
var matchHeight = function matchHeight(selector) {
  var elements = document.querySelectorAll(selector);
  if (!elements.length) return;

  // Get the tallest height by mapping all elements to their offsetHeight and finding the max value
  var tallest = Math.max.apply(Math, _toConsumableArray(_toConsumableArray(elements).map(function (el) {
    return el.offsetHeight;
  })));

  // Set each element's height to the tallest value
  elements.forEach(function (el) {
    el.style.height = "".concat(tallest, "px");
  });
};

/**
 * scroll target position with animation
 * @param {String} target scroll class
 * @param {Number} duration scroll time in ms
 * @param {Number} margin negative value form top
 * @example
 * scroll('body', 500, 90)
 */
exports.matchHeight = matchHeight;
var smoothScroll = function smoothScroll(target, duration) {
  var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (!target) return;
  var targetPosition = target.getBoundingClientRect().top - width;
  var startPosition = window.pageYOffset;
  var startTime = null;
  var animation = function animation(currentTime) {
    if (startTime === null) startTime = currentTime;
    var timeElapsed = currentTime - startTime;
    var run = ease(timeElapsed, startPosition, targetPosition, duration);
    window.scrollTo(0, run);
    if (timeElapsed < duration) requestAnimationFrame(animation);
  };
  requestAnimationFrame(animation);
  var ease = function ease(t, b, c, d) {
    t /= d / 2;
    if (t < 1) return c / 2 * t * t + b;
    t--;
    return -c / 2 * (t * (t - 2) - 1) + b;
  };
};

/**
 * this method will be call when any key pressed in estimate daily field, pass value to calculateInterest method and return start status
 *
 * @param {Number} start get estimate daily balance number of click      *
 * @example
 * activeInputVal(1, 1200)
 */
exports.smoothScroll = smoothScroll;
var validateInputNoSlider = function validateInputNoSlider(selector, errorSelector) {
  var hideClass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var minValue = Number(selector.getAttribute('data-min'));
  var maxValue = Number(selector.getAttribute('data-max'));
  var decimalPlaces = Number(selector.getAttribute('data-decimal'));
  var initValue = selector.value,
    value = 0;
  hideClass ? errorSelector.classList.add('hide') : errorSelector.style.display = 'none';
  if (!decimalPlaces) {
    value = initValue.replace(/[^0-9]+/gi, '').replace(/^0/, ''); //remove all string except 0-9
    if (value != initValue) {
      selector.value = value;
    }
    if (value) {
      value = parseInt(value, 10);
    }
  } else {
    decimalPlaces = Number(decimalPlaces);
    //if text field supports fraction value
    value = initValue.replace(/[^0-9.]/gi, '').replace(/^0/, '');
    if (value != initValue) {
      selector.value = value;
    }
    if (!value) {
      value = '';
    } else {
      var raVal = value.split('.');
      if (value === '.') {
        hideClass ? errorSelector.classList.remove('hide') : errorSelector.style.display = 'block';
        return;
      } else if (raVal.length > decimalPlaces) {
        //more than two floating point
        value = "".concat(raVal[0], ".").concat(raVal[1]);
        selector.value = value;
        return;
      } else if (raVal[1] && raVal[1].length > decimalPlaces) {
        value = "".concat(raVal[0], ".") + raVal[1].substr(0, decimalPlaces);
        selector.value = value;
        return;
      }
      if (value.slice(-1) === '.') {
        return;
      } else if (raVal[1] && raVal[1].length === 1) {
        value = parseFloat(value).toFixed(1);
      } else {
        value = Number(value);
      }
    }
  }
  if (maxValue !== -1 && value > maxValue) {
    //checking text field maximum value
    value = maxValue;
  } else if (value === '' && minValue > 0) {
    //leave text field as blank and fill it with 0
    value = '';
    hideClass ? errorSelector.classList.remove('hide') : errorSelector.style.display = 'block';
  } else if (value < minValue) {
    hideClass ? errorSelector.classList.remove('hide') : errorSelector.style.display = 'block';
  }
  selector.value = value;
};
exports.validateInputNoSlider = validateInputNoSlider;
var getAssetDomain = function getAssetDomain() {
  /* eslint-disable no-undef*/
  if (typeof baseURL === 'undefined' || baseURL === '') {
    var env = getCurrentEnvironment();
    var domain = getPageUrl().domain;
    if (env === window.scCommonConstants.PRODUCTION) {
      return urlObj[11] + '://' + urlObj[5] + '.' + urlObj[3] + '.' + urlObj[4] + '/' + urlObj[6] + '/' + urlObj[7] + '/';
    } else if (env === window.scCommonConstants.DEVELOPMENT) {
      if (domain === urlObj[3] + '.' + urlObj[14]) {
        return '/content/themes/scretail/assets/global/';
      } else if (domain === urlObj[1] + '.' + urlObj[2] + '.' + urlObj[4] || domain === urlObj[0] + '.' + urlObj[3] + '.' + urlObj[4]) {
        return urlObj[11] + '://' + urlObj[1] + '.' + urlObj[2] + '.' + urlObj[4] + '/' + urlObj[8] + '/' + urlObj[6] + '/' + urlObj[7] + '/';
      } else {
        return '/assets/';
      }
    } else if (env === window.scCommonConstants.STAGING) {
      return urlObj[11] + '://' + urlObj[1] + '.' + urlObj[2] + '.' + urlObj[4] + '/' + urlObj[9] + '/' + urlObj[6] + '/' + urlObj[7] + '/';
    } else {
      return urlObj[11] + '://' + urlObj[1] + '.' + urlObj[2] + '.' + urlObj[4] + '/' + urlObj[6] + '/' + urlObj[7] + '/';
    }
  } else if (baseURL === '/zoo') {
    return urlObj[11] + '://' + urlObj[10] + '.' + urlObj[3] + '.' + urlObj[4] + '/' + urlObj[15] + '/' + urlObj[6] + '/';
  } else {
    return baseURL;
  }
  /* eslint-enable no-undef*/
};

/**
 * trigger adobe popupViewed event when showing popups
 */
exports.getAssetDomain = getAssetDomain;
var triggerPopupViewedTagging = function triggerPopupViewedTagging(popupName) {
  if (typeof launchscript === 'undefined' && !document.querySelector('#adobelaunchscript')) {
    //Adobe Analytics not enable for this market
    return;
  }
  setTimeout(function () {
    var dataObject = _objectSpread(_objectSpread({}, digitalData), {}, {
      form: {
        formName: '',
        formStepName: '',
        formType: '',
        formPlatform: ''
      }
    });
    dataObject.form.popupName = popupName;
    dataObject.event = 'popupViewed';
    scAnalyticsDataArray.push(dataObject);
  }, 500);
};
exports.triggerPopupViewedTagging = triggerPopupViewedTagging;
var getCampaignInfoV1 = function getCampaignInfoV1() {
  var pageName = window.digitalData.page.pageInfo.pageName.split(':');
  var allowableQueryString = window.scCommonConstants.ALLOWABLE_QUERYSTRING.scb;
  if (pageName[0] === 'pk' && pageName[3] === 'udp-form' || pageName[0] === 'in') {
    var campaignData = getIntExtCampaignInfo(pageName[0]);
    window.digitalData.campaign = {
      internal: {
        campaignName: campaignData['intName'],
        campaignValue: campaignData['intVal']
      },
      external: {
        campaignName: campaignData['extName'],
        campaignValue: campaignData['extVal']
      }
    };
  } else {
    var _campaignData = getCampaignInfo(allowableQueryString);
    window.digitalData.campaign = window.digitalData.campaign || {};
    window.digitalData.campaign = {
      internal: {
        campaignName: _campaignData[0],
        campaignValue: _campaignData[1]
      }
    };
  }
};

/**
 * Processes a campaign object and updates the `window.digitalData.campaign` object with the extracted query parameters and values.
 */
exports.getCampaignInfoV1 = getCampaignInfoV1;
var getCampaignInfoV2 = function getCampaignInfoV2(campaignObj) {
  Object.entries(campaignObj).forEach(function (_ref9) {
    var _ref10 = _slicedToArray(_ref9, 2),
      key = _ref10[0],
      value = _ref10[1];
    if (key === 'internal' || key === 'external') {
      var paramValue = extractQueryParams(value);
      window.digitalData.campaign[key] = {
        campaignName: value[0],
        campaignValue: paramValue ? paramValue.split(':')[1] : 'na'
      };
    } else if (key === 'other') {
      var _paramValue = extractQueryParams(value, true);
      window.digitalData.campaign.otherParams = _paramValue ? _paramValue : '';
    } else if (value.length) {
      value.forEach(function (el) {
        var paramValue = extractQueryParams([el]);
        window.digitalData.campaign[el] = paramValue ? paramValue.split(':')[1] : '';
      });
    }
  });
};

/**
 * Extracts query parameters from the current URL based on inclusion or exclusion rules.
 */
exports.getCampaignInfoV2 = getCampaignInfoV2;
var extractQueryParams = function extractQueryParams() {
  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var excludeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var url = new URL(window.location.href);
  var params = new URLSearchParams(url.search);
  var keyValuePairs = [];

  // eslint-disable-next-line no-unused-vars
  var _iterator = _createForOfIteratorHelper(params.entries()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      var shouldInclude = excludeParams ? !queryParams.includes(key) // Exclude certain params
      : queryParams.length === 0 || queryParams.includes(key); // Include all or only specific params

      if (shouldInclude && value) {
        keyValuePairs.push("".concat(key, ":").concat(value));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return keyValuePairs.join('|');
};

/**
 * based on white list parameters return campaignName and campaignValue
 * @param {Object} allowableQueryString are whitelist parameters
 * @return {Object} return collections of campaignName and campaignValue
 * @example
 * getCampaignInfo(['subChanCode', 'camp_id', 'promoCode'])
 */
exports.extractQueryParams = extractQueryParams;
var getCampaignInfo = function getCampaignInfo(allowableQueryString) {
  if (!allowableQueryString.length) return '';
  var total = allowableQueryString.length;
  var campaignName = '';
  var campaignValue = '';
  for (var i = 0; i < total; i++) {
    var cookieValue = getCookie(allowableQueryString[i]);
    var localStorageValue = getLocalStorageWithExpiry(allowableQueryString[i]);
    if (cookieValue || localStorageValue) {
      if (campaignName) {
        campaignName += ':';
        campaignValue += ':';
      }
      campaignName += allowableQueryString[i];
      campaignValue += cookieValue || localStorageValue;
    }
  }
  if (!campaignName) campaignName = 'na';
  if (!campaignValue) campaignValue = 'na';
  return [campaignName, campaignValue];
};

/**
 * Extracts a context string from a DOM element by checking multiple attributes
 * and properties in a prioritized order: `data-context`, `title`, `innerText`,
 * `textContent`, and `aria-label`. Defaults to an empty string if no value is found.
 *
 * @param {Element} closest - The DOM element from which to extract the context.
 * @returns {string} The extracted context, trimmed of leading and trailing whitespace.
 */
exports.getCampaignInfo = getCampaignInfo;
var getCtaContext = function getCtaContext(closest) {
  var _ref11, _ref12, _ref13, _ref14, _closest$getAttribute2;
  var context = (_ref11 = (_ref12 = (_ref13 = (_ref14 = (_closest$getAttribute2 = closest.getAttribute('data-context')) !== null && _closest$getAttribute2 !== void 0 ? _closest$getAttribute2 : closest.getAttribute('title')) !== null && _ref14 !== void 0 ? _ref14 : closest.innerText) !== null && _ref13 !== void 0 ? _ref13 : closest.textContent) !== null && _ref12 !== void 0 ? _ref12 : closest.getAttribute('aria-label')) !== null && _ref11 !== void 0 ? _ref11 : '';
  return String(context).trim();
};

/**
 * getQueryParam method is created because "new URLSearchParams()"" not support in IOS
 * search specific param from the queryString, if found it return value, else return empty
 * @example
 * getQueryParam('subChanCode=2023&referId=xyz&pid=123', 'referId')
 */
exports.getCtaContext = getCtaContext;
var getQueryParam = function getQueryParam(queryString, paramName) {
  if (!queryString) return '';
  // Split the query string into an array of key-value pairs
  var queryParamsList = queryString.split('&');
  var paramValue = '';

  // eslint-disable-next-line no-unused-vars
  var _iterator2 = _createForOfIteratorHelper(queryParamsList),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var param = _step2.value;
      var _param$split = param.split('='),
        _param$split2 = _slicedToArray(_param$split, 2),
        key = _param$split2[0],
        value = _param$split2[1];
      if (key === paramName) {
        //it's case sensitive
        paramValue = value;
        break; // No need to continue once 'referId' is found
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return paramValue;
};

/**
 * Retrieves the heading text of the closest accordion element for a given element.
 *
 * @param {HTMLElement} element - The element for which to find the closest accordion heading.
 * @returns {string} The heading text of the closest accordion, followed by a colon if found; otherwise, an empty string.
 */
exports.getQueryParam = getQueryParam;
var getAccordionHeading = function getAccordionHeading(element) {
  var _accordionElement$que;
  if (!element) return '';
  var accordionElement = element.closest('.sc-accordion, .c-plus-minus-accordion___item');
  if (!accordionElement) return '';
  var headingElement = (_accordionElement$que = accordionElement.querySelector('.sc-heading')) !== null && _accordionElement$que !== void 0 ? _accordionElement$que : accordionElement.querySelector('.accordion-header label');
  if (!headingElement) return '';
  var headingText = trim(headingElement.innerText);
  return headingText ? "".concat(headingText, ":") : '';
};

/**
 * Handles the scroll event and shows or hides the persistent bar based on the scroll position.
 */
exports.getAccordionHeading = getAccordionHeading;
var handlePersistentBarScroll = function handlePersistentBarScroll() {
  var _ref15, _ref16, _window$scrollY, _ref17, _window$innerWidth;
  var persistentBar = document.querySelector('.sc-persistent-bar');
  if (!persistentBar) return;
  var bannerSdk = document.querySelector('#onetrust-banner-sdk');
  if (bannerSdk && bannerSdk.style && bannerSdk.style.display !== 'none') {
    //Don't show persistent bar if oneTrust cookie banner exist
    return;
  }
  var scrollPosition = (_ref15 = (_ref16 = (_window$scrollY = window.scrollY) !== null && _window$scrollY !== void 0 ? _window$scrollY : document.documentElement.scrollTop) !== null && _ref16 !== void 0 ? _ref16 : document.body.scrollTop) !== null && _ref15 !== void 0 ? _ref15 : 0;
  var windowWidth = (_ref17 = (_window$innerWidth = window.innerWidth) !== null && _window$innerWidth !== void 0 ? _window$innerWidth : document.documentElement.clientWidth) !== null && _ref17 !== void 0 ? _ref17 : document.body.clientWidth;
  var scrollLimit = 600;
  var pBarTarget = document.querySelector('[data-persistent-bar-target]');
  if (pBarTarget) {
    var selectedElement = document.querySelector('.' + pBarTarget.getAttribute('data-persistent-bar-target'));
    if (selectedElement) {
      scrollLimit = getOuterHeight(selectedElement) + getPosition(selectedElement);
      if (windowWidth >= 768) {
        //Ignore menu height
        scrollLimit -= 70;
      }
    }
  }
  var pBarSkip = document.querySelector('[data-persistent-bar-skip]');
  var skipFromTop = 0;
  var skipHeight = 0;
  if (pBarSkip) {
    var _selectedElement = document.querySelector('.' + pBarSkip.getAttribute('data-persistent-bar-skip'));
    if (_selectedElement) {
      skipFromTop = getPosition(_selectedElement);
      skipHeight = getOuterHeight(_selectedElement);
      if (windowWidth >= 768) {
        //Ignore menu height
        skipFromTop -= 70;
      }
    }
  }
  var skipDevice = document.querySelector('[data-persistent-bar-skip-device]');
  if (skipDevice) {
    var skipAttr = skipDevice.getAttribute('data-persistent-bar-skip-device');
    var _isMobile = windowWidth < 768;
    if (skipAttr === 'mobile' && _isMobile || skipAttr !== 'mobile' && !_isMobile) {
      skipFromTop = 0;
      skipHeight = 0;
    }
  }
  var screenHeight = window.screen.height;
  screenHeight -= windowWidth < 768 ? 20 : 250;
  if (pBarSkip && scrollPosition + screenHeight >= skipFromTop && scrollPosition <= skipFromTop + skipHeight) {
    //Skip persistent bar for a certain position
    persistentBar.classList.remove('sc-persistent-bar--show');
    document.body.style.marginBottom = 0;
  } else if (scrollPosition > scrollLimit) {
    persistentBar.classList.add('sc-persistent-bar--show');
    var persistentBarHight = getOuterHeight(persistentBar);
    document.body.style.marginBottom = "".concat(persistentBarHight, "px");
  } else {
    persistentBar.classList.remove('sc-persistent-bar--show');
    document.body.style.marginBottom = 0;
  }
};

/**
 * Get the user agent of the current browser
 * @returns {{browserCodename: string, browserName: string, browserVersion: string, cookiesEnabled: boolean, browserLanguage: string, browserOnline: boolean, platform: string, userAgentHeader: string}}
 */
exports.handlePersistentBarScroll = handlePersistentBarScroll;
var getDeviceDetails = function getDeviceDetails() {
  var os = '';
  // eslint-disable-next-line compat/compat
  var nAgt = navigator.userAgent;
  var clientStrings = [{
    s: 'W 10',
    r: /(Windows 10.0|Windows NT 10.0)/
  }, {
    s: 'W 8.1',
    r: /(Windows 8.1|Windows NT 6.3)/
  }, {
    s: 'W 8',
    r: /(Windows 8|Windows NT 6.2)/
  }, {
    s: 'W 7',
    r: /(Windows 7|Windows NT 6.1)/
  }, {
    s: 'W Vista',
    r: /Windows NT 6.0/
  }, {
    s: 'W Server 2003',
    r: /Windows NT 5.2/
  }, {
    s: 'W XP',
    r: /(Windows NT 5.1|Windows XP)/
  }, {
    s: 'W 2000',
    r: /(Windows NT 5.0|Windows 2000)/
  }, {
    s: 'W ME',
    r: /(Win 9x 4.90|Windows ME)/
  }, {
    s: 'W 98',
    r: /(Windows 98|Win98)/
  }, {
    s: 'W 95',
    r: /(Windows 95|Win95|Windows_95)/
  }, {
    s: 'W NT 4.0',
    r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/
  }, {
    s: 'W CE',
    r: /Windows CE/
  }, {
    s: 'W 3.11',
    r: /Win16/
  }, {
    s: 'Android',
    r: /Android/
  }, {
    s: 'Open BSD',
    r: /OpenBSD/
  }, {
    s: 'Sun OS',
    r: /SunOS/
  }, {
    s: 'L',
    r: /(Linux|X11)/
  }, {
    s: 'iOS',
    r: /(iPhone|iPad|iPod)/
  }, {
    s: 'Mac OS X',
    r: /Mac OS X/
  }, {
    s: 'Mac OS',
    r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/
  }, {
    s: 'QNX',
    r: /QNX/
  }, {
    s: 'U',
    r: /UNIX/
  }, {
    s: 'BeOS',
    r: /BeOS/
  }, {
    s: 'OS/2',
    r: /OS\/2/
  }, {
    s: 'Search Bot',
    r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/
  }];
  for (var id in clientStrings) {
    var cs = clientStrings[id];
    if (cs.r.test(nAgt)) {
      os = cs.s;
      break;
    }
  }
  var osVersion = '';
  if (/Windows/.test(os)) {
    osVersion = /Windows (.*)/.exec(os)[1];
    os = 'Windows';
  }
  switch (os) {
    case 'Mac OS X':
      // eslint-disable-next-line no-case-declarations
      var macMatch = /Mac OS X (10|11[._\d]+)/.exec(nAgt);
      osVersion = macMatch ? macMatch[1] : 'Unknown';
      break;
    case 'Android':
      // eslint-disable-next-line no-case-declarations
      var androidMatch = /Android ([._\d]+)/.exec(nAgt);
      osVersion = androidMatch ? androidMatch[1] : 'Unknown';
      break;
    case 'iOS':
      // eslint-disable-next-line no-case-declarations
      var iOSMatch = /OS (\d+)_(\d+)_?(\d+)?/.exec(nAgt);
      osVersion = iOSMatch ? iOSMatch[1] + '.' + iOSMatch[2] + '.' + (iOSMatch[3] || 0) : 'Unknown';
      break;
  }
  var deviceInfo = 'd';
  if (/Mobi/.test(navigator.userAgent)) {
    deviceInfo = 'm';
  }
  var screenSize = '',
    width = 0,
    height = 0;
  if (screen.width) {
    width = screen.width ? screen.width : '';
    height = screen.height ? screen.height : '';
    screenSize += '' + width + ' x ' + height;
  }

  /* eslint-disable compat/compat */
  return {
    browserCodename: navigator.appCodeName,
    browserName: navigator.appName,
    browserVersion: navigator.appVersion,
    cookiesEnabled: navigator.cookieEnabled,
    browserLanguage: navigator.language,
    browserOnline: navigator.onLine,
    platform: navigator.platform,
    userAgentHeader: navigator.userAgent,
    agentHeader: navigator.getAgent,
    deviceInfo: deviceInfo,
    screenSize: screenSize,
    os: os,
    osVersion: osVersion
  };
  /* eslint-enable compat/compat */
};
exports.getDeviceDetails = getDeviceDetails;
var browserDetect = function browserDetect() {
  var browser = {
    name: '',
    version: '',
    versionSearchString: '',
    dataBrowser: [{
      string: navigator.userAgent,
      subString: 'Edge',
      identity: 'MS Edge'
    }, {
      string: navigator.userAgent,
      subString: 'Edg',
      identity: 'Edge'
    }, {
      string: navigator.userAgent,
      subString: 'MSIE',
      identity: 'Explorer'
    }, {
      string: navigator.userAgent,
      subString: 'Trident',
      identity: 'Explorer'
    }, {
      string: navigator.userAgent,
      subString: 'Firefox',
      identity: 'Firefox'
    }, {
      string: navigator.userAgent,
      subString: 'Opera',
      identity: 'Opera'
    }, {
      string: navigator.userAgent,
      subString: 'OPR',
      identity: 'Opera'
    }, {
      string: navigator.userAgent,
      subString: 'Chrome',
      identity: 'Chrome'
    }, {
      string: navigator.userAgent,
      subString: 'Safari',
      identity: 'Safari'
    }],
    init: function init() {
      this.name = this.searchString(this.dataBrowser) || 'Other';
      this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || 'Unknown';
    },
    searchString: function searchString(data) {
      for (var i = 0; i < data.length; i++) {
        var dataString = data[i].string;
        var subString = data[i].subString;
        this.versionSearchString = subString;
        if (dataString.includes(subString)) {
          return data[i].identity;
        }
      }
      return null;
    },
    searchVersion: function searchVersion(dataString) {
      if (!this.versionSearchString) return null;
      var index = dataString.indexOf(this.versionSearchString);
      if (index === -1) {
        return null;
      }
      var rvIndex = dataString.indexOf('rv:');
      if (this.versionSearchString === 'Trident' && rvIndex !== -1) {
        return parseFloat(dataString.substring(rvIndex + 3));
      } else {
        return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
      }
    }
  };
  browser.init();
  return browser;
};

/**
 * get total number of days in this month
 */
exports.browserDetect = browserDetect;
var daysInThisMonth = function daysInThisMonth() {
  var now = new Date();
  return new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
};

/**
 * Handles the transformation and assignment of product-related data
 * into the `window.digitalData.products` array.
 */
exports.daysInThisMonth = daysInThisMonth;
var handleProductsObj = function handleProductsObj(countryCode) {
  var _window$digitalData$p;
  var pageName = window.digitalData.page.pageInfo.pageName.split(':');
  window.digitalData.products = window.digitalData.products || [];
  var subProduct1 = countryCode === 'hk' && window.digitalData.page.category.primaryCategory === 'na' ? '' : window.digitalData.page.category.primaryCategory;
  var subProduct2 = countryCode === 'hk' && window.digitalData.page.category.subCategory1 === 'na' ? '' : window.digitalData.page.category.subCategory1;
  window.digitalData.products = [{
    productID: (_window$digitalData$p = window.digitalData.page.productInfo) !== null && _window$digitalData$p !== void 0 && _window$digitalData$p.productId ? window.digitalData.page.productInfo.productId.toLowerCase().trim().replace(/\s+/g, '-') : '',
    productName: pageName[6].toLowerCase().trim().replace(/\s+/g, '-'),
    subProduct1: subProduct1.toLowerCase().trim().replace(/\s+/g, '-'),
    subProduct2: subProduct2.toLowerCase().trim().replace(/\s+/g, '-')
  }];
};

/**
 * Returns the ordinal representation of a given number (e.g., 1st, 2nd, 3rd, 4th).
 *
 * @param {number} num - The number to convert.
 * @returns {string} The number with its ordinal suffix.
 */
/**
 * Returns the ordinal number in English or Chinese based on the language.
 *
 * @param {number} num - The number to convert.
 * @param {string} language - The language code ("en" for English, "zh" for Chinese).
 * @returns {string} The formatted number with its ordinal suffix or Chinese equivalent.
 */
exports.handleProductsObj = handleProductsObj;
var getFormattedNumber = function getFormattedNumber(num) {
  var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';
  var chineseNumbers = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十'];
  if (language === 'zh') {
    if (num <= 10) {
      return chineseNumbers[num]; // Return the Chinese number for 0-10
    }

    return num.toString().split('').map(function (digit) {
      return chineseNumbers[parseInt(digit)];
    }).join(''); // Convert multi-digit numbers
  }

  // English ordinal handling
  if (num % 100 >= 11 && num % 100 <= 13) {
    return num + 'th'; // Special case for 11, 12, 13
  }

  switch (num % 10) {
    case 1:
      return num + 'st';
    case 2:
      return num + 'nd';
    case 3:
      return num + 'rd';
    default:
      return num + 'th';
  }
};
exports.getFormattedNumber = getFormattedNumber;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
