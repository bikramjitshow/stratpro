// @params:
//   font-size (mandatory)
//   font-weight (mandatory)
//   letter-spacing (mandatory)
//   line-height (mandatory)
//   max-lines (optional)
//   show-dots (optional)
//   flexible-height (optional).
// Default true
// If true, sets a flexible height depending on it's content.
// If false, sets it's height to auto and the min-height to the same value as line-height*num-lines
// (independent of the number of lines the real content has).

@mixin sc-text($settings: ()) {
  $font-size: map-get($settings, font-size);
  $font-weight: map-get($settings, font-weight);
  $letter-spacing: map-get($settings, letter-spacing);
  $line-height: map-get($settings, line-height);
  $max-lines: map-get($settings, max-lines);
  $show-dots: map-get($settings, show-dots);
  $flexible-height: map-get($settings, flexible-height);

  @if $font-size {
    font-size: $font-size;
  }

  @if $font-weight {
    @include __safe-font-weight($font-weight);
  }

  @if $letter-spacing {
    letter-spacing: $letter-spacing;
  }
  @if $line-height {
    line-height: $line-height;
  }

  @if $max-lines {
    @if ($flexible-height == null) {
      $flexible-height: true;
    }
    @include truncated-text-multiline(
      $max-lines: $max-lines,
      $line-height: $line-height,
      $flexible-height: $flexible-height,
      $show-dots: $show-dots
    );
    @content;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////

// PRIVATE MIXINS

///////////////////////////////////////////////////////////////////////////////////////////////////

// Private usage.
// Use sc-text and sc-text update mixins

// RULES
// 1. All texts with font-weight 200 should convert to 300 ONLY on touch devices

@mixin __safe-font-weight($font-weight) {
  @if ($font-weight == 200) {
    // NOTE: it's applying a default font-weight because the touchevents class can have a small delay.
    // If, not setted, by default the font-weight it's 400 so sometimes you could see a huge text change from 400 to the corrected font-weight.
    font-weight: $font-weight;

    @at-root .touchevents & {
      font-weight: 200;
    }
  } @else {
    font-weight: $font-weight;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////

// REFERENCE MIXIN
// This mixin is taken from the Workbench project. It may have some things useful for future hacks

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Sets font-size and font-weight.
 *
 * Font-weights smaller than 300 are only allowed when font-size
 * is higher than 36px.
 *
 * Font-sizes bigger than 20px should activate aliased smoothing,
 * then increase font-weight to 300
 *
 * If we're on IE, and font-size
 * is less or equal than 17px and font-weight is less than 400,
 * then font-weight is increased to improve readibility.
 *
 * @params
 * $font-size: font size
 * $font-weight: font weight
 * $antialiased: boolean to active aliased smoothing
 * $supers: collection of parent classes to apply the mixin, they have to be separated by comas
 *
 *
 * Example 1:
 *
 *.component---header---title {
 *   @include safe-font-size(15px, 300, false, '.is-upload-step', '.bp-small', '.bp-medium');
 * }
 *
 * The $supers refers to the parent classes, so in this case, the mixin apply when the parent class is .is-upload-step,
 * bp-small or bp-medium
 *
 *
 * Example 2:
 *
 * .component---info.type---header {
 *    .component---info---title {
 *      @include safe-font-size(52px, 300, false, '.layout-2cols');
 *    }
 * }
 *
 * The font size here is 52px, bigger than 20px, so the aliased smoothing should activate.
 * The $supers is only one, so the mixin only apply to the '.layout-2cols .component---info.type---header .component---info---title'
 *
 */

// @mixin safe-font-size($font-size, $font-weight: 300, $antialiased: false, $supers...) {
//   @if($antialiased) {
//     @if($font-size > 20px and $font-weight < 300){
//       $font-weight: 300;
//       @include font-smoothing(antialiased);
//     }
//   }

//   $windows-weight: $font-weight;

//   @if (($font-weight < 300) and $font-size < 29px) {
//     $font-weight: 300;
//   }

//   @if (($font-weight < 400) and $font-size <= 17px) {
//     $windows-weight: 400;
//   }

//   @if (length($supers) > 0){
//     @each $class in $supers {
//       @if($class == 'default'){
//         font-size: $font-size;
//         font-weight: $font-weight;
//       } @else {
//         #{$class} & {
//           font-size: $font-size;
//           font-weight: $font-weight;
//         }
//       }
//     }
//   }@else{
//     font-size: $font-size;
//     font-weight: $font-weight;
//   }

//   @if ($font-weight != $windows-weight) {
//     @if (length($supers) > 0){
//       @each $class in $supers {
//         @if($class == 'default'){
//           font-weight: $windows-weight;
//         } @else{
//           #{$class}.windows & {
//             font-weight: $windows-weight;
//           }
//         }
//       }
//     } @else{
//       .windows & {
//         font-weight: $windows-weight;
//       }
//     }
//   }
// }
